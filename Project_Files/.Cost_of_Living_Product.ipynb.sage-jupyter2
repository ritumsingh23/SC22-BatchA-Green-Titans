{"backend_state":"init","connection_file":"/projects/d061bad1-2739-44d6-bf33-6fa5871e6830/.local/share/jupyter/runtime/kernel-dd21fd53-4208-4abc-b574-09003225ce9c.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0306fa","input":"","pos":136,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"049523","input":"random_forest.score(x_test_sm, y_test_sm)","pos":89,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"04c2d3","input":"#everything below is for costofliving2 in order!","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0538b9","input":"df = px.data.tips()\nfig = px.scatter(costofliving1, x = ('Cost of Living Plus Rent Index'), y = 'Local Purchasing Power Index',\n                 color = 'City',\n                 title = 'Cost of Living',\n                 trendline = \"expanding\" , trendline_scope=\"overall\")\n\nfig.show()","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"05d9e4","input":"df = px.data.tips()\nfig = px.scatter(costofliving1, x = ('Cost of Living Plus Rent Index'), y = 'Local Purchasing Power Index',\n                 color = 'City',\n                 title = 'Cost of Living',\n                 trendline = \"lowess\" , trendline_scope=\"overall\")\n\nfig.show()","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"06d7d9","input":"plt.figure(figsize = (15,8))\nsns.heatmap(merged_costofliving_mod1.corr())","pos":43,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"070f71","input":"sc_y = StandardScaler()\nsc_x = StandardScaler()\ny_std = sc_y.fit_transform(y_train_ar.reshape(1,-1))\nx_train_std = sc_x.fit_transform(x_train_ar)\nx_test_std = sc_x.transform(x_test_ar)\ny_train_std = sc_y.fit_transform(y_train_ar)","pos":102,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0cb838","input":"#reading data set\nx = final_df.drop('Cost of Living Index', axis= 'columns')\ny = final_df['Cost of Living Index']","pos":68,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0eb034","input":"#Accuracy Scores\nregressor.score(x_test_Kath, y_test_Kath)","pos":81,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0f7461","input":"# import dataset\ndataset = pd.read_csv('./Project_Data/costofliving.csv') \n# alternatively open up .csv file to read data\ndataset = np.array(merged_costofliving)","pos":51,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"127097","input":"costofliving2.rename(columns = {'index':'City'}, inplace = True) #renaming column header","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"12d250","input":"","pos":95,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"132643","input":"#fitting data\nregressor = SVR(kernel = 'rbf')\nregressor.fit(x_train_Kath, y_train_Kath)","pos":77,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"133f73","input":"linr_reg = LinearRegression()\nlinr_reg.fit(x_train_Nne, y_train_Nne)\nmodel_performance.append({\n        'model': 'Linear_Regression',\n        'train_accuracy': linr_reg.score(x_train_Nne, y_train_Nne),\n        'test_accuracy': linr_reg.score(x_test_Nne, y_test_Nne),\n        'Mean_Sqr_Error': mean_squared_error(y_test_Nne, linr.predict(x_test_Nne))\n    })","pos":133,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"163894","input":"","pos":103,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1671e1","input":"mean_squared_error(y_test_Kath,y_pred )","pos":82,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"18d306","input":"#training\nfrom sklearn.svm import SVR\nregressor = SVR(kernel='rbf', gamma='scale', tol=0.001, C=100)\nregressor.fit(x_train_Kath, y_train_Kath)","pos":78,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1b8403","input":"rf_reg = RandomForestRegressor(n_estimators=50, criterion='squared_error', random_state=4)\nrf_reg.fit(x_train_sm, y_train_sm)\nmodel_performance.append({\n        'model': 'Random_Forest',\n        'train_accuracy': rf_reg.score(x_train_sm, y_train_sm),\n        'test_accuracy': rf_reg.score(x_test_sm, y_test_sm),\n        'Mean_Sqr_Error': mean_squared_error(y_test_sm, rf_reg.predict(x_test_sm))\n    })","pos":131,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1c4f4a","input":"#Final merged data set below! ↓↓","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"27c94b","input":"costofliving2","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"280b80","input":"costofliving2.drop(0, axis=0, inplace=True) #delete row 0","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2a9485","input":"costofliving2.reset_index(inplace=True) #convert index to column","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2ecc6c","input":"x = final_df.drop('Cost of Living Index', axis=1)","pos":116,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2f9dfd","input":"sv_reg = SVR(kernel='rbf', C=5)\nsv_reg.fit(x_train_Kath, y_train_Kath)\nmodel_performance.append({\n        'model': 'SVR',\n        'train_accuracy': sv_reg.score(x_train_Kath, y_train_Kath),\n        'test_accuracy': sv_reg.score(x_test_Kath, y_test_Kath),\n        'Mean_Sqr_Error': mean_squared_error(y_test_Kath,y_pred )\n    })","pos":130,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3174b8","input":"y = final_df['Cost of Living Index']","pos":118,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3185d4","input":"","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"364c4c","input":"costofliving2.columns = costofliving2.iloc[0] #assign row as column header","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"37c5da","input":"linr.score(x_train_Nne, y_train_Nne)#also put y_train_Nne","pos":124,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3f3c8d","input":"print(merged_costofliving.shape)","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"41a8b1","input":"cols_selected = ['Rent Index', 'Cost of Living Plus Rent Index', 'Groceries Index', 'Restaurant Price Index', 'Cost of Living Index']\ndf[cols_selected].head()","pos":97,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"429832","input":"fig = px.box(costofliving1, x=\"Cost of Living Index\", y=\"Local Purchasing Power Index\", color=\"City\", points='all')\nfig.show()","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"42febd","input":"costofliving1","pos":29,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4394c9","input":"costofliving1 = costofliving1.drop(['Rank'],axis=1)","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"45f487","input":"linr = LinearRegression()\nlinr.fit(x_train_Nne, y_train_Nne)\nprint(linr.intercept_, linr.coef_[0])","pos":121,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"488051","input":" # Splitting the dataset into train and test\nX_train_Dav, X_test_Dav, y_train_Dav, y_test_Dav = train_test_split( \nx, y, test_size = 0.2, random_state = 100)","pos":59,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4ef2a2","input":"#now do mean_squared_error(y_test_sm, random_forest.predict(x_test_sm)) but with linr instead of random_forest and your variables\nmean_squared_error(y_test_Nne, linr.predict(x_test_Nne))","pos":126,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5196a6","input":"costofliving1 = pd.read_csv('./Project_Data/costofliving.csv')","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"53097f","input":"encoder_df","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"557045","input":"final_df.columns","pos":117,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"57c127","input":"#Amir (Lasso)\ndf = pd.read_csv(\"./Project_Data/costofliving.csv\")\ndf.head()","pos":96,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"57c4cb","input":"merged_costofliving.info()","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"58ca64","input":"x","pos":69,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5976ad","input":"# select all rows by : and column 2\n# by 2 to Y representing labels\ny = dataset[:, 2].astype(int) \n  \n# print y\nprint(len(y))","pos":54,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5c621b","input":"regressor.score(X_train_Dav, y_train_Dav)","pos":62,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"659273","input":"sns.heatmap(merged_costofliving.corr())","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"667ccc","input":"","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"670a22","input":"","pos":137,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"676d28","input":"random_forest.score(x_train_sm, y_train_sm)","pos":88,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6a7bd5","input":"lasso_model.score(x_test_ar, y_test_ar)","pos":107,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6bc17a","input":"lasso_model.score(x_train_ar, y_train_ar)","pos":106,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6d6687","input":"merged_costofliving_mod1.columns","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6e614c","input":"#code to convert column objects into floats/numbers\n\nmerged_costofliving_mod1[['Cost of Living Index', 'Rent Index',\n       'Cost of Living Plus Rent Index', 'Groceries Index',\n       'Restaurant Price Index', 'Local Purchasing Power Index',\n       'Meal, Inexpensive Restaurant',\n       'Meal for 2 People, Mid-range Restaurant, Three-course',\n       'McMeal at McDonalds (or Equivalent Combo Meal)',\n       'One-way Ticket (Local Transport)', 'Monthly Pass (Regular Price)',\n       'Gasoline (1 liter)', 'Apartment (1 bedroom) in City Centre',\n       'Apartment (1 bedroom) Outside of Centre',\n       'Apartment (3 bedrooms) in City Centre',\n       'Apartment (3 bedrooms) Outside of Centre',\n       'Basic (Electricity, Heating, Cooling, Water, Garbage) for 85m2 Apartment',\n       'Internet (60 Mbps or More, Unlimited Data, Cable/ADSL)',\n       'Fitness Club, Monthly Fee for 1 Adult',\n       'Price per Square Meter to Buy Apartment in City Centre',\n       'Price per Square Meter to Buy Apartment Outside of Centre',\n       'Average Monthly Net Salary (After Tax)', 'Taxi Start (Normal Tariff)',\n       'Taxi 1km (Normal Tariff)', 'Taxi 1hour Waiting (Normal Tariff)',\n       'Preschool (or Kindergarten), Full Day, Private, Monthly for 1 Child',\n       'International Primary School, Yearly for 1 Child']] = merged_costofliving_mod1[['Cost of Living Index', 'Rent Index',\n       'Cost of Living Plus Rent Index', 'Groceries Index',\n       'Restaurant Price Index', 'Local Purchasing Power Index',\n       'Meal, Inexpensive Restaurant',\n       'Meal for 2 People, Mid-range Restaurant, Three-course',\n       'McMeal at McDonalds (or Equivalent Combo Meal)',\n       'One-way Ticket (Local Transport)', 'Monthly Pass (Regular Price)',\n       'Gasoline (1 liter)', 'Apartment (1 bedroom) in City Centre',\n       'Apartment (1 bedroom) Outside of Centre',\n       'Apartment (3 bedrooms) in City Centre',\n       'Apartment (3 bedrooms) Outside of Centre',\n       'Basic (Electricity, Heating, Cooling, Water, Garbage) for 85m2 Apartment',\n       'Internet (60 Mbps or More, Unlimited Data, Cable/ADSL)',\n       'Fitness Club, Monthly Fee for 1 Adult',\n       'Price per Square Meter to Buy Apartment in City Centre',\n       'Price per Square Meter to Buy Apartment Outside of Centre',\n       'Average Monthly Net Salary (After Tax)', 'Taxi Start (Normal Tariff)',\n       'Taxi 1km (Normal Tariff)', 'Taxi 1hour Waiting (Normal Tariff)',\n       'Preschool (or Kindergarten), Full Day, Private, Monthly for 1 Child',\n       'International Primary School, Yearly for 1 Child']].apply(pd.to_numeric)","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6f8ac1","input":"evaluation_df = pd.DataFrame(model_performance, columns=['model', 'train_accuracy', 'test_accuracy', 'Mean_Sqr_Error'])\nevaluation_df","pos":134,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6fc788","input":"x_train_sm, x_test_sm, y_train_sm, y_test_sm = train_test_split(\nx, y, test_size=0.2, random_state=123)\n\nprint ('Train group shape:', x_train_sm.shape)\nprint ('Test group shape:', x_test_sm.shape)\n\nx_train_sm['Train_or_test'] = 1\nx_test_sm['Train_or_test'] = 0 \n\nrandom_forest = RandomForestRegressor(n_estimators=500, random_state=123)\nrandom_forest.fit(x_train_sm, y_train_sm)","pos":87,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"734812","input":"print(x_train_Kath.shape)\nprint(x_test_Kath.shape)\nprint(y_train_Kath.shape)\nprint(y_test_Kath.shape)","pos":76,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7466e1","input":"encoder = OneHotEncoder(handle_unknown= 'ignore')\nencoder_df = pd.DataFrame(encoder.fit_transform(merged_costofliving_mod1[['City']]).toarray(), columns=merged_costofliving_mod1[['City']].values)","pos":45,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7541da","input":"x_train_Nne, x_test_Nne, y_train_Nne, y_test_Nne = train_test_split( x, y, test_size=0.2 )","pos":119,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"78921a","input":"#costofliving 2 ↓↓","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7be468","input":"#everything below is for costofliving1 in order! ↓↓","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"80b95c","input":"df = px.data.tips()\nfig = px.box","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"821795","input":"# import the regressor\nfrom sklearn.tree import DecisionTreeRegressor \n  \n# create a regressor object\nregressor = DecisionTreeRegressor(random_state = 0) \n  \n# fit the regressor with X and Y data\nregressor.fit(X_train_Dav, y_train_Dav)","pos":60,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"825efd","input":"x = pd.DataFrame(scaled_x, columns= x.columns)","pos":72,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"851e7b","input":"Y_pred = regressor.predict(np.array([6.5]).reshape(1, 1))","pos":92,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"86556d","input":"","pos":112,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"89c9a0","input":"merged_costofliving = pd.merge(costofliving1, costofliving2, on= 'City') #merging data sets","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8b0f84","input":"x_train_ar, x_test_ar, y_train_ar, y_test_ar = train_test_split( x, y, \n                                      test_size=0.2, random_state=0)","pos":100,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8db52f","input":"","pos":66,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8fc819","input":"#feature scaling\nsc_x = StandardScaler()\nscaled_x = sc_x.fit_transform(x)","pos":71,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8fe38d","input":"#merged set = 'merged_costofliving'","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"902524","input":"fig = px.scatter(costofliving1, x='Cost of Living Index', y='Local Purchasing Power Index', trendline=\"lowess\")","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9309a7","input":"merged_costofliving_mod1.info()","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"947926","input":"# import export_graphviz\nfrom sklearn.tree import export_graphviz \n  \n# export the decision tree to a tree.dot file\n# for visualizing the plot easily anywhere\nexport_graphviz(regressor_dt, out_file ='tree.dot',\n               feature_names =['Production Cost'])","pos":57,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"968271","input":"mean_squared_error(y_test_sm, random_forest.predict(x_test_sm))","pos":90,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9800f2","input":"mean_squared_error(y_test_ar, lasso_model.predict(x_test_ar))","pos":108,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"99593f","input":"x= final_df.drop('Cost of Living Index', axis = 'columns')\ny= final_df['Cost of Living Index']","pos":85,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"997038","input":"regressor = RandomForestRegressor(n_estimators = 100, random_state = 0)\nregressor.fit(x, y) ","pos":91,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9a7863","input":"plt.figure(figsize=(10,5))\nplt.plot(x_test_Nne, y_hat, '--')\n\nplt.scatter(x_test_Nne,y_test_Nne, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","pos":123,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9b1a26","input":"l_reg = Lasso(random_state=4)\nl_reg.fit(x_train_ar, y_train_ar)\nmodel_performance.append({\n        'model': 'Lasso',\n        'train_accuracy': l_reg.score(x_train_ar, y_train_ar),\n        'test_accuracy': l_reg.score(x_test_ar, y_test_ar),\n        'Mean_Sqr_Error': mean_squared_error(y_test_ar, lasso_model.predict(x_test_ar))\n    })","pos":132,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9b75aa","input":"y_hat = linr.predict(x_test_Nne)","pos":122,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9da43b","input":"alpha = np.linspace(0.01,0.4,10)\nr2_train =[]\nr2_test =[]\nnorm = []\nalpha = np.linspace(0.01,0.4,10)\nfor i in range(10):\n    lasso = Lasso(alpha = alpha[i])\n    lasso.fit(x_train_std,y_train_std)\n    y_train_std = lasso.predict(x_train_std)\n    y_test_std = lasso.predict(x_test_std)\n    r2_train = np.append(r2_train,\n              r2_score(y_train,sc_y.inverse_transform(y_train_std)))\n    r2_test = np.append(r2_test,\n              r2_score(y_test,sc_y.inverse_transform(y_test_std)))\n    norm = np.append(norm,np.linalg.norm(lasso.coef_))","pos":109,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a23d48","input":"#defining x and y\nx = final_df['Groceries Index'] .to_numpy\ny = final_df[''].to_numpy","pos":114,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a58868","input":"lasso_model = Lasso(random_state=0)\nlasso_model.fit(x_train_ar, y_train_ar)","pos":105,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a6ac07","input":"from sklearn.ensemble import RandomForestRegressor","pos":84,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a7a237","input":"y","pos":70,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a80049","input":"","pos":111,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"af514f","input":"costofliving2 = pd.read_csv('./Project_Data/cost-of-living.csv')","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"afaa19","input":"#do the same but with x_test_Nne, y_test_Nne\nlinr.score(x_test_Nne, y_test_Nne)","pos":125,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b24585","input":"","pos":104,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b34496","input":"costofliving2 = costofliving2.transpose() #swap rows and columns","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b4a411","input":"from sklearn.preprocessing import OneHotEncoder","pos":44,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b9252a","input":"from sklearn.metrics import mean_squared_error","pos":64,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"bceb03","input":"x = df[cols_selected].iloc[:,0:4].values\ny = df[cols_selected]['Cost of Living Index'].values","pos":98,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"bdae43","input":"# select all rows by : and column 1\n# by 1:2 representing features\nX = dataset[:, 1:2].astype(int) \n  \n# print X\nprint(len(X))","pos":53,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"beacc9","input":"#The x and y variables for the following models\nx = final_df.drop('Cost of Living Index', axis= 'columns')\ny = final_df['Cost of Living Index']","pos":49,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c318f3","input":"print(dataset)","pos":52,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c443a8","input":"merged_costofliving.isnull().sum()","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c48a62","input":"regressor.score(x_train_Kath, y_train_Kath)","pos":80,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c7742c","input":"x","pos":73,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cbbe73","input":"#cleaning the data -- dropping missing and duplicate values for sanity\nmerged_costofliving.dropna(inplace = True) # dropping missing values\nmerged_costofliving.drop_duplicates(inplace = True) # dropping duplicate values here\nmerged_costofliving = merged_costofliving.reset_index(drop=True) # resetting the index\n\nlength = len(merged_costofliving.index) #save length of array of later","pos":34,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d1e9ab","input":"costofliving2 = costofliving2.rename_axis(None, axis=1) #removing index header","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d28bc3","input":"regressor_dt = DecisionTreeRegressor()\nregressor_dt.fit(X,y)","pos":55,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d96f69","input":"mean_squared_error(y_test_Dav,y_pred )","pos":65,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"daa66b","input":"# arange for creating a range of values \n# from min value of X to max value of X \n# with a difference of 0.01 between two\n# consecutive values\nX_grid = np.arange(min(X), max(X), 0.01)\n\nprint(len(X_grid))\n  \n# reshape for reshaping the data into \n# a len(X_grid)*1 array, i.e. to make\n# a column out of the X_grid values\nX_grid = X_grid.reshape((len(X_grid)), 1)\n  \n# scatter plot for original data\nplt.scatter(X, y, color = 'red')\n  \n# plot predicted data\nplt.plot(X_grid, regressor_dt.predict(X_grid), color = 'blue') \n  \n# specify title\nplt.title('Cost of Living') \n  \n# specify X axis label\nplt.xlabel('x-placeholder')\n  \n# specify Y axis label\nplt.ylabel('Cost of Living')\n  \n# show the plot\nplt.show()","pos":56,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ddbe65","input":"regressor.score(X_test_Dav, y_test_Dav)","pos":63,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e4eafe","input":"#predict\ny_pred = regressor.predict(x_test_Kath)\ny_pred\n# y_pred = y.inverse_transform(y_pred)","pos":79,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e6c751","input":"cross_val_score()","pos":94,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e8c19b","input":"#How The Cost of Living Index corresponds to The Local Purchasing Power Index in each city - How much it cost to live a a certain are v.s. how much the average perosn makes there\ndf = px.data.tips()\nfig = px.scatter(costofliving1, x = ('Cost of Living Plus Rent Index'), y = 'Local Purchasing Power Index',\n                 color = 'City',\n                 title = 'Cost of Living',\n                 trendline = \"ols\" , trendline_scope=\"overall\")\n\nfig.show()","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e8f6ac","input":"#training (split data 80/20)\nfrom sklearn.model_selection import train_test_split\nx_train_Kath, x_test_Kath, y_train_Kath, y_test_Kath = train_test_split(x, y, test_size = 0.2)","pos":75,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"eb5334","input":"merged_costofliving ","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"eb5dbd","input":"dt_reg = DecisionTreeRegressor(criterion=\"squared_error\",splitter='random', random_state=4)\ndt_reg.fit(X_train_Dav, y_train_Dav)\nmodel_performance.append({\n        'model': 'Decision_Tree_Regression',\n        'train_accuracy': dt_reg.score(X_train_Dav, y_train_Dav),\n        'test_accuracy': dt_reg.score(X_test_Dav, y_test_Dav),\n        'Mean_Sqr_Error': mean_squared_error(y_test_Dav, dt_reg.predict(X_test_Dav))\n    })","pos":129,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ecf17c","input":"model_performance = []","pos":128,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f1f034","input":"x_train_ar","pos":101,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f220c4","input":"","pos":127,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f37942","input":"#code to remove unnecessary columns\nmerged_costofliving_mod1 = merged_costofliving.drop(['Water (0.33 liter bottle) ', 'Milk (regular), (1 liter)','Water (1.5 liter bottle)',\n                                                     'Cigarettes 20 Pack (Marlboro)','Volkswagen Golf',\n                                                     '1 min. of Prepaid Mobile Tariff Local (No Discounts or Plans)',\n                                                     'Cinema, International Release, 1 Seat','1 Pair of Jeans (Levis 501 Or Similar)',\n                                                     '1 Summer Dress in a Chain Store (Zara, H&M, ...)',\n                                                     '1 Pair of Nike Running Shoes (Mid-Range)','1 Pair of Men Leather Business Shoes',\n                                                     'Mortgage Interest Rate in Percentages (%), Yearly, for 20 Years Fixed-Rate',\n                                                     'Toyota Corolla 1.6l 97kW Comfort (Or Equivalent New Car)', 'Apples (1kg)', 'Oranges (1kg)',\n                                                     'Potato (1kg)', 'Lettuce (1 head)','Cappuccino (regular)', 'Rice (white), (1kg)', 'Tomato (1kg)',\n                                                     'Banana (1kg)', 'Onion (1kg)','Beef Round (1kg) (or Equivalent Back Leg Red Meat)',\n                                                    'Domestic Beer (0.5 liter draught)', 'Imported Beer (0.33 liter bottle)',\n                                                     'Coke/Pepsi (0.33 liter bottle)', 'Loaf of Fresh White Bread (500g)', 'Eggs (regular) (12)', \n                                                     'Local Cheese (1kg)', 'Bottle of Wine (Mid-Range)', 'Domestic Beer (0.5 liter bottle)',\n                                                     'Imported Beer (0.33 liter bottle)', 'Chicken Breasts (Boneless, Skinless), (1kg)',\n                                                    'Tennis Court Rent (1 Hour on Weekend)'], axis = 'columns')","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f5d7da","input":"# predicting a new value\n  \n# test the output by changing values\ny_pred = regressor.predict(X_test_Dav)\n  \n# print the predicted price\nprint(\"Predicted Costofliving: \", y_pred) ","pos":61,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fa26ad","input":"plt.subplot(1,2,1)\nplt.scatter(x_train_Nne,y_train_Nne, c='orange')  \n#plt.xlabel('x', fontsize=10)\n#plt.ylabel('y', fontsize= 10)\n#plt.title('cost of living train plot')\n#plt.grid('on')\n\n#plt.show()\n\n","pos":120,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fb6509","input":"## Code that Ritum creation (Gets rid of tuple headers)\n\ncolumns = final_df.columns\ncolumns_fixed = []\n\nfor i in range(len(columns)):\n    if type(columns[i]) == str:\n        columns_fixed.append(columns[i])\n    else:\n        columns_fixed.append(columns[i][0])\n        \n# columns_fixed\n\nfinal_df = pd.DataFrame(final_df.values, columns = columns_fixed)\nfinal_df","pos":48,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"feef29","input":"final_df = pd.concat([merged_costofliving_mod1, encoder_df], axis='columns').drop(\"City\", axis=\"columns\")\nfinal_df.head()","pos":47,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"841e0f","input":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import Lasso, LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, r2_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"112f3d","input":"costofliving1 = pd.read_csv('./Project_Data/costofliving.csv')\ncostofliving2 = pd.read_csv('./Project_Data/cost-of-living.csv')","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"024bb0","input":"# Basic Cost of Living graphs below!! ↓↓","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"0bb4ab","input":"#The Local Purchasing Power Index of each City -  Measures the relative purchasing power of a typical salary in that city, compared to New York City\ndf = px.data.tips()\nfig = px.histogram(costofliving1, x = ('Cost of Living Plus Rent Index'), y = 'City',\n                 color = 'Local Purchasing Power Index',\n                 title = 'Cost of Living')\n\nfig.show()","output":{"0":{"data":{"iframe":"42dfbda6e2ae31c7f2cdf876f003010288e6d30a"},"exec_count":4,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"1c3a5d","input":"df = px.data.tips()\nfig = px.pie(merged_costofliving, label =(\"Cost of Living Plus Rent Index\")\nfig.show()","output":{"0":{"ename":"SyntaxError","evalue":"invalid syntax (2386282522.py, line 3)","output_type":"error","traceback":["\u001b[0;36m  Input \u001b[0;32mIn [5]\u001b[0;36m\u001b[0m\n\u001b[0;31m    fig.show()\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"0cc5ee","input":"df = px.data.gapminder()\nfig = px.area(merged_costofliving, x=\"Cost of Living Index\", y=\"City\", color=\"Cost of Living Plus Rent Index\", line_group=\"Local Purchasing Power Index\")\nfig.show()\n","output":{"0":{"ename":"NameError","evalue":"name 'merged_costofliving' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [6]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m df \u001b[38;5;241m=\u001b[39m px\u001b[38;5;241m.\u001b[39mdata\u001b[38;5;241m.\u001b[39mgapminder()\n\u001b[0;32m----> 2\u001b[0m fig \u001b[38;5;241m=\u001b[39m px\u001b[38;5;241m.\u001b[39marea(\u001b[43mmerged_costofliving\u001b[49m, x\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCost of Living Index\u001b[39m\u001b[38;5;124m\"\u001b[39m, y\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCity\u001b[39m\u001b[38;5;124m\"\u001b[39m, color\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCost of Living Plus Rent Index\u001b[39m\u001b[38;5;124m\"\u001b[39m, line_group\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLocal Purchasing Power Index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m      3\u001b[0m fig\u001b[38;5;241m.\u001b[39mshow()\n","\u001b[0;31mNameError\u001b[0m: name 'merged_costofliving' is not defined"]}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"4e93af","input":"sns.heatmap(merged_costofliving.corr())","output":{"0":{"ename":"NameError","evalue":"name 'merged_costofliving' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [7]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m sns\u001b[38;5;241m.\u001b[39mheatmap(\u001b[43mmerged_costofliving\u001b[49m\u001b[38;5;241m.\u001b[39mcorr())\n","\u001b[0;31mNameError\u001b[0m: name 'merged_costofliving' is not defined"]}},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"02b38d","input":"#### Split-Fit-Predict-Evaluate","pos":86,"type":"cell"}
{"cell_type":"markdown","id":"165b31","input":"# Katherine (SVM/SVR)","pos":67,"type":"cell"}
{"cell_type":"markdown","id":"185245","input":"# Sophia (Random Forest)","pos":83,"type":"cell"}
{"cell_type":"markdown","id":"26460e","input":"#### Split-Fit-Predict-Evaluate","pos":74,"type":"cell"}
{"cell_type":"markdown","id":"2d36ea","input":"#### Split-Fit-Predict-Evaluate","pos":58,"type":"cell"}
{"cell_type":"markdown","id":"5a49a9","input":"plt.figure(figsize=(8,6))\nplt.scatter(alpha,r2_train,label='r2_train')\nplt.plot(alpha,r2_train)\nplt.scatter(alpha,r2_test,label='r2_test')\nplt.plot(alpha,r2_test)\nplt.scatter(alpha,norm,label = 'norm')\nplt.plot(alpha,norm)\nplt.ylim(-0.1,1)\nplt.xlim(0,.43)\nplt.xlabel('alpha', size = 14)\nplt.ylabel('R2_score',size = 14)\nplt.legend()\nplt.show()","pos":110,"type":"cell"}
{"cell_type":"markdown","id":"5bde40","input":"# Amir - Lasso Regression","pos":93,"type":"cell"}
{"cell_type":"markdown","id":"5f3556","input":"#### Split-Fit-Predict-Evaluate","pos":115,"type":"cell"}
{"cell_type":"markdown","id":"86646e","input":"# Cost of Living\n\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"9511f1","input":"#","pos":135,"type":"cell"}
{"cell_type":"markdown","id":"9d816c","input":"# Nne Ezi - Linear Regression","pos":113,"type":"cell"}
{"cell_type":"markdown","id":"d4cb3e","input":"# David - Decision Tree","pos":50,"type":"cell"}
{"cell_type":"markdown","id":"f7b960","input":"#### Split-Fit-Predict-Evaluate","pos":99,"type":"cell"}
{"id":0,"time":1655822082663,"type":"user"}
{"last_load":1655821991205,"type":"file"}