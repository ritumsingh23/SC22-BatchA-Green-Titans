{"backend_state":"running","connection_file":"/projects/d061bad1-2739-44d6-bf33-6fa5871e6830/.local/share/jupyter/runtime/kernel-c5d65598-b71e-4285-802d-a37606b63329.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1655479419132,"exec_count":1,"id":"4992cd","input":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import Lasso\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split","kernel":"ds_env","no_halt":true,"pos":1,"start":1655479417368,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479419165,"exec_count":2,"id":"36f160","input":"costofliving1 = pd.read_csv('./Project_Data/costofliving.csv')\ncostofliving2 = pd.read_csv('./Project_Data/cost-of-living.csv')","kernel":"ds_env","no_halt":true,"pos":2,"start":1655479419152,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479419174,"exec_count":3,"id":"8477c0","input":"# Basic Cost of Living graphs below!! ↓↓","kernel":"ds_env","no_halt":true,"pos":3,"start":1655479419169,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479421227,"exec_count":4,"id":"502463","input":"#The Local Purchasing Power Index of each City -  Measures the relative purchasing power of a typical salary in that city, compared to New York City\ndf = px.data.tips()\nfig = px.histogram(costofliving1, x = ('Cost of Living Plus Rent Index'), y = 'City',\n                 color = 'Local Purchasing Power Index',\n                 title = 'Cost of Living')\n\nfig.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"ba31c3cc1339c37b46e59a3e1d7142e5a7a2976c"}}},"pos":4,"start":1655479419178,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479421785,"exec_count":5,"id":"c3ae35","input":"df = px.data.tips()\nfig = px.pie(merged_costofliving, label ='Cost of Living Plus Rent Index')\nfig.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"ename":"NameError","evalue":"name 'merged_costofliving' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [5]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m df \u001b[38;5;241m=\u001b[39m px\u001b[38;5;241m.\u001b[39mdata\u001b[38;5;241m.\u001b[39mtips()\n\u001b[0;32m----> 2\u001b[0m fig \u001b[38;5;241m=\u001b[39m px\u001b[38;5;241m.\u001b[39mpie(\u001b[43mmerged_costofliving\u001b[49m, label \u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCost of Living Plus Rent Index\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      3\u001b[0m fig\u001b[38;5;241m.\u001b[39mshow()\n","\u001b[0;31mNameError\u001b[0m: name 'merged_costofliving' is not defined"]}},"pos":5,"start":1655479421252,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479421824,"exec_count":6,"id":"318b67","input":"df = px.data.gapminder()\nfig = px.area(merged_costofliving, x=\"Cost of Living Index\", y=\"City\", color=\"Cost of Living Plus Rent Index\", line_group=\"Local Purchasing Power Index\")\nfig.show()\n","kernel":"ds_env","no_halt":true,"output":{"0":{"ename":"NameError","evalue":"name 'merged_costofliving' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [6]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m df \u001b[38;5;241m=\u001b[39m px\u001b[38;5;241m.\u001b[39mdata\u001b[38;5;241m.\u001b[39mgapminder()\n\u001b[0;32m----> 2\u001b[0m fig \u001b[38;5;241m=\u001b[39m px\u001b[38;5;241m.\u001b[39marea(\u001b[43mmerged_costofliving\u001b[49m, x\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCost of Living Index\u001b[39m\u001b[38;5;124m\"\u001b[39m, y\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCity\u001b[39m\u001b[38;5;124m\"\u001b[39m, color\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCost of Living Plus Rent Index\u001b[39m\u001b[38;5;124m\"\u001b[39m, line_group\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLocal Purchasing Power Index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m      3\u001b[0m fig\u001b[38;5;241m.\u001b[39mshow()\n","\u001b[0;31mNameError\u001b[0m: name 'merged_costofliving' is not defined"]}},"pos":6,"start":1655479421798,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479421857,"exec_count":7,"id":"3b6b26","input":"sns.heatmap(merged_costofliving.corr())","kernel":"ds_env","no_halt":true,"output":{"0":{"ename":"NameError","evalue":"name 'sns' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [7]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43msns\u001b[49m\u001b[38;5;241m.\u001b[39mheatmap(merged_costofliving\u001b[38;5;241m.\u001b[39mcorr())\n","\u001b[0;31mNameError\u001b[0m: name 'sns' is not defined"]}},"pos":7,"start":1655479421834,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479423488,"exec_count":8,"id":"81eb22","input":"#How The Cost of Living Index corresponds to The Local Purchasing Power Index in each city - How much it cost to live a a certain are v.s. how much the average perosn makes there\ndf = px.data.tips()\nfig = px.scatter(costofliving1, x = ('Cost of Living Plus Rent Index'), y = 'Local Purchasing Power Index',\n                 color = 'City',\n                 title = 'Cost of Living',\n                 trendline = \"ols\" , trendline_scope=\"overall\")\n\nfig.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"22f3240e6667354b14a65cee16433b3d4aa69c9e"}}},"pos":8,"start":1655479421867,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479425093,"exec_count":9,"id":"120889","input":"df = px.data.tips()\nfig = px.scatter(costofliving1, x = ('Cost of Living Plus Rent Index'), y = 'Local Purchasing Power Index',\n                 color = 'City',\n                 title = 'Cost of Living',\n                 trendline = \"lowess\" , trendline_scope=\"overall\")\n\nfig.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"7cf03d764a6275cc45e92d4f62f4ffa9c5da6e4b"}}},"pos":9,"start":1655479423500,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479426534,"exec_count":10,"id":"a255d3","input":"df = px.data.tips()\nfig = px.scatter(costofliving1, x = ('Cost of Living Plus Rent Index'), y = 'Local Purchasing Power Index',\n                 color = 'City',\n                 title = 'Cost of Living',\n                 trendline = \"expanding\" , trendline_scope=\"overall\")\n\nfig.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"f0f6b71d46c9474738c17aac592ef46cff7425b9"}}},"pos":10,"start":1655479425103,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479426557,"exec_count":11,"id":"b4829b","input":"df = px.data.tips()\nfig = px.box","kernel":"ds_env","no_halt":true,"pos":11,"start":1655479426546,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479426681,"exec_count":12,"id":"94243a","input":"fig = px.scatter(costofliving1, x='Cost of Living Index', y='Local Purchasing Power Index', trendline=\"lowess\")","kernel":"ds_env","no_halt":true,"pos":12,"start":1655479426566,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428040,"exec_count":13,"id":"5b5376","input":"fig = px.box(costofliving1, x=\"Cost of Living Index\", y=\"Local Purchasing Power Index\", color=\"City\", points='all')\nfig.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"2be4203ddbf80ef107be6f821abfb7f824871c5a"}}},"pos":13,"start":1655479426690,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428064,"exec_count":14,"id":"b35710","input":"#costofliving 2 ↓↓","kernel":"ds_env","no_halt":true,"pos":16,"start":1655479428062,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428074,"exec_count":15,"id":"51ca5b","input":"#everything below is for costofliving2 in order!","kernel":"ds_env","no_halt":true,"pos":17,"start":1655479428070,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428091,"exec_count":16,"id":"1f14f5","input":"costofliving2 = pd.read_csv('./Project_Data/cost-of-living.csv')","kernel":"ds_env","no_halt":true,"pos":18,"start":1655479428080,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428102,"exec_count":17,"id":"d687a9","input":"costofliving2 = costofliving2.transpose() #swap rows and columns","kernel":"ds_env","no_halt":true,"pos":19,"start":1655479428094,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428121,"exec_count":18,"id":"fe1292","input":"costofliving2.columns = costofliving2.iloc[0] #assign row as column header","kernel":"ds_env","no_halt":true,"pos":20,"start":1655479428120,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428131,"exec_count":19,"id":"922fd1","input":"costofliving2.reset_index(inplace=True) #convert index to column","kernel":"ds_env","no_halt":true,"pos":21,"start":1655479428127,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428140,"exec_count":20,"id":"466631","input":"costofliving2.drop(0, axis=0, inplace=True) #delete row 0","kernel":"ds_env","no_halt":true,"pos":22,"start":1655479428135,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428151,"exec_count":21,"id":"0bc248","input":"costofliving2.rename(columns = {'index':'City'}, inplace = True) #renaming column header","kernel":"ds_env","no_halt":true,"pos":23,"start":1655479428148,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428163,"exec_count":22,"id":"b981b3","input":"costofliving2 = costofliving2.rename_axis(None, axis=1) #removing index header","kernel":"ds_env","no_halt":true,"pos":24,"start":1655479428157,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428205,"exec_count":23,"id":"ade1f0","input":"costofliving2","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>City</th>\n      <th>Meal, Inexpensive Restaurant</th>\n      <th>Meal for 2 People, Mid-range Restaurant, Three-course</th>\n      <th>McMeal at McDonalds (or Equivalent Combo Meal)</th>\n      <th>Domestic Beer (0.5 liter draught)</th>\n      <th>Imported Beer (0.33 liter bottle)</th>\n      <th>Coke/Pepsi (0.33 liter bottle)</th>\n      <th>Water (0.33 liter bottle)</th>\n      <th>Milk (regular), (1 liter)</th>\n      <th>Loaf of Fresh White Bread (500g)</th>\n      <th>...</th>\n      <th>Lettuce (1 head)</th>\n      <th>Cappuccino (regular)</th>\n      <th>Rice (white), (1kg)</th>\n      <th>Tomato (1kg)</th>\n      <th>Banana (1kg)</th>\n      <th>Onion (1kg)</th>\n      <th>Beef Round (1kg) (or Equivalent Back Leg Red Meat)</th>\n      <th>Toyota Corolla 1.6l 97kW Comfort (Or Equivalent New Car)</th>\n      <th>Preschool (or Kindergarten), Full Day, Private, Monthly for 1 Child</th>\n      <th>International Primary School, Yearly for 1 Child</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Saint Petersburg, Russia</td>\n      <td>7.34</td>\n      <td>29.35</td>\n      <td>4.4</td>\n      <td>2.2</td>\n      <td>2.2</td>\n      <td>0.76</td>\n      <td>0.53</td>\n      <td>0.98</td>\n      <td>0.71</td>\n      <td>...</td>\n      <td>0.86</td>\n      <td>1.96</td>\n      <td>0.92</td>\n      <td>1.91</td>\n      <td>0.89</td>\n      <td>0.48</td>\n      <td>7.18</td>\n      <td>19305.29</td>\n      <td>411.83</td>\n      <td>5388.86</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Istanbul, Turkey</td>\n      <td>4.58</td>\n      <td>15.28</td>\n      <td>3.82</td>\n      <td>3.06</td>\n      <td>3.06</td>\n      <td>0.64</td>\n      <td>0.24</td>\n      <td>0.71</td>\n      <td>0.36</td>\n      <td>...</td>\n      <td>0.61</td>\n      <td>1.84</td>\n      <td>1.3</td>\n      <td>0.8</td>\n      <td>1.91</td>\n      <td>0.62</td>\n      <td>9.73</td>\n      <td>20874.72</td>\n      <td>282.94</td>\n      <td>6905.43</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Izmir, Turkey</td>\n      <td>3.06</td>\n      <td>12.22</td>\n      <td>3.06</td>\n      <td>2.29</td>\n      <td>2.75</td>\n      <td>0.61</td>\n      <td>0.22</td>\n      <td>0.65</td>\n      <td>0.38</td>\n      <td>...</td>\n      <td>0.57</td>\n      <td>1.56</td>\n      <td>1.31</td>\n      <td>0.7</td>\n      <td>1.78</td>\n      <td>0.58</td>\n      <td>8.61</td>\n      <td>20898.83</td>\n      <td>212.18</td>\n      <td>4948.41</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Helsinki, Finland</td>\n      <td>12.0</td>\n      <td>65.0</td>\n      <td>8.0</td>\n      <td>6.5</td>\n      <td>6.75</td>\n      <td>2.66</td>\n      <td>1.89</td>\n      <td>0.96</td>\n      <td>2.27</td>\n      <td>...</td>\n      <td>2.3</td>\n      <td>3.87</td>\n      <td>2.13</td>\n      <td>2.91</td>\n      <td>1.61</td>\n      <td>1.25</td>\n      <td>12.34</td>\n      <td>24402.77</td>\n      <td>351.6</td>\n      <td>1641.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Chisinau, Moldova</td>\n      <td>4.67</td>\n      <td>20.74</td>\n      <td>4.15</td>\n      <td>1.04</td>\n      <td>1.43</td>\n      <td>0.64</td>\n      <td>0.44</td>\n      <td>0.68</td>\n      <td>0.33</td>\n      <td>...</td>\n      <td>0.84</td>\n      <td>1.25</td>\n      <td>0.93</td>\n      <td>1.56</td>\n      <td>1.37</td>\n      <td>0.59</td>\n      <td>5.37</td>\n      <td>17238.13</td>\n      <td>210.52</td>\n      <td>2679.3</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>156</th>\n      <td>Melbourne, Australia</td>\n      <td>10.22</td>\n      <td>49.54</td>\n      <td>7.12</td>\n      <td>5.57</td>\n      <td>5.57</td>\n      <td>1.91</td>\n      <td>1.7</td>\n      <td>0.9</td>\n      <td>1.88</td>\n      <td>...</td>\n      <td>1.57</td>\n      <td>2.63</td>\n      <td>1.58</td>\n      <td>3.06</td>\n      <td>2.2</td>\n      <td>1.78</td>\n      <td>9.42</td>\n      <td>15221.84</td>\n      <td>1250.41</td>\n      <td>12874.09</td>\n    </tr>\n    <tr>\n      <th>157</th>\n      <td>Perth, Australia</td>\n      <td>12.43</td>\n      <td>56.55</td>\n      <td>7.32</td>\n      <td>5.9</td>\n      <td>5.59</td>\n      <td>1.79</td>\n      <td>1.62</td>\n      <td>1.03</td>\n      <td>1.76</td>\n      <td>...</td>\n      <td>1.26</td>\n      <td>2.86</td>\n      <td>1.96</td>\n      <td>2.4</td>\n      <td>2.11</td>\n      <td>1.29</td>\n      <td>9.49</td>\n      <td>15239.2</td>\n      <td>1190.12</td>\n      <td>11526.08</td>\n    </tr>\n    <tr>\n      <th>158</th>\n      <td>Sydney, Australia</td>\n      <td>11.81</td>\n      <td>54.37</td>\n      <td>7.15</td>\n      <td>4.97</td>\n      <td>4.97</td>\n      <td>1.99</td>\n      <td>1.68</td>\n      <td>0.9</td>\n      <td>1.85</td>\n      <td>...</td>\n      <td>1.59</td>\n      <td>2.48</td>\n      <td>1.65</td>\n      <td>3.01</td>\n      <td>2.17</td>\n      <td>1.72</td>\n      <td>11.24</td>\n      <td>15066.62</td>\n      <td>1389.43</td>\n      <td>11933.55</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>Alexandria, Egypt</td>\n      <td>2.81</td>\n      <td>14.06</td>\n      <td>3.38</td>\n      <td>1.69</td>\n      <td>2.81</td>\n      <td>0.32</td>\n      <td>0.19</td>\n      <td>0.81</td>\n      <td>0.51</td>\n      <td>...</td>\n      <td>0.2</td>\n      <td>1.45</td>\n      <td>0.66</td>\n      <td>0.39</td>\n      <td>0.66</td>\n      <td>0.31</td>\n      <td>8.37</td>\n      <td>23071.86</td>\n      <td>55.41</td>\n      <td>2132.54</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>Quito, Ecuador</td>\n      <td>3.59</td>\n      <td>31.45</td>\n      <td>5.39</td>\n      <td>1.35</td>\n      <td>2.7</td>\n      <td>0.71</td>\n      <td>0.47</td>\n      <td>0.87</td>\n      <td>1.35</td>\n      <td>...</td>\n      <td>0.58</td>\n      <td>1.81</td>\n      <td>1.34</td>\n      <td>1.06</td>\n      <td>0.99</td>\n      <td>0.94</td>\n      <td>6.46</td>\n      <td>25324.92</td>\n      <td>276.63</td>\n      <td>6410.05</td>\n    </tr>\n  </tbody>\n</table>\n<p>160 rows × 56 columns</p>\n</div>","text/plain":"                         City Meal, Inexpensive Restaurant  \\\n1    Saint Petersburg, Russia                         7.34   \n2            Istanbul, Turkey                         4.58   \n3               Izmir, Turkey                         3.06   \n4           Helsinki, Finland                         12.0   \n5           Chisinau, Moldova                         4.67   \n..                        ...                          ...   \n156      Melbourne, Australia                        10.22   \n157          Perth, Australia                        12.43   \n158         Sydney, Australia                        11.81   \n159         Alexandria, Egypt                         2.81   \n160            Quito, Ecuador                         3.59   \n\n    Meal for 2 People, Mid-range Restaurant, Three-course  \\\n1                                                29.35      \n2                                                15.28      \n3                                                12.22      \n4                                                 65.0      \n5                                                20.74      \n..                                                 ...      \n156                                              49.54      \n157                                              56.55      \n158                                              54.37      \n159                                              14.06      \n160                                              31.45      \n\n    McMeal at McDonalds (or Equivalent Combo Meal)  \\\n1                                              4.4   \n2                                             3.82   \n3                                             3.06   \n4                                              8.0   \n5                                             4.15   \n..                                             ...   \n156                                           7.12   \n157                                           7.32   \n158                                           7.15   \n159                                           3.38   \n160                                           5.39   \n\n    Domestic Beer (0.5 liter draught) Imported Beer (0.33 liter bottle)  \\\n1                                 2.2                               2.2   \n2                                3.06                              3.06   \n3                                2.29                              2.75   \n4                                 6.5                              6.75   \n5                                1.04                              1.43   \n..                                ...                               ...   \n156                              5.57                              5.57   \n157                               5.9                              5.59   \n158                              4.97                              4.97   \n159                              1.69                              2.81   \n160                              1.35                               2.7   \n\n    Coke/Pepsi (0.33 liter bottle) Water (0.33 liter bottle)   \\\n1                             0.76                       0.53   \n2                             0.64                       0.24   \n3                             0.61                       0.22   \n4                             2.66                       1.89   \n5                             0.64                       0.44   \n..                             ...                        ...   \n156                           1.91                        1.7   \n157                           1.79                       1.62   \n158                           1.99                       1.68   \n159                           0.32                       0.19   \n160                           0.71                       0.47   \n\n    Milk (regular), (1 liter) Loaf of Fresh White Bread (500g)  ...  \\\n1                        0.98                             0.71  ...   \n2                        0.71                             0.36  ...   \n3                        0.65                             0.38  ...   \n4                        0.96                             2.27  ...   \n5                        0.68                             0.33  ...   \n..                        ...                              ...  ...   \n156                       0.9                             1.88  ...   \n157                      1.03                             1.76  ...   \n158                       0.9                             1.85  ...   \n159                      0.81                             0.51  ...   \n160                      0.87                             1.35  ...   \n\n    Lettuce (1 head) Cappuccino (regular) Rice (white), (1kg) Tomato (1kg)  \\\n1               0.86                 1.96                0.92         1.91   \n2               0.61                 1.84                 1.3          0.8   \n3               0.57                 1.56                1.31          0.7   \n4                2.3                 3.87                2.13         2.91   \n5               0.84                 1.25                0.93         1.56   \n..               ...                  ...                 ...          ...   \n156             1.57                 2.63                1.58         3.06   \n157             1.26                 2.86                1.96          2.4   \n158             1.59                 2.48                1.65         3.01   \n159              0.2                 1.45                0.66         0.39   \n160             0.58                 1.81                1.34         1.06   \n\n    Banana (1kg) Onion (1kg)  \\\n1           0.89        0.48   \n2           1.91        0.62   \n3           1.78        0.58   \n4           1.61        1.25   \n5           1.37        0.59   \n..           ...         ...   \n156          2.2        1.78   \n157         2.11        1.29   \n158         2.17        1.72   \n159         0.66        0.31   \n160         0.99        0.94   \n\n    Beef Round (1kg) (or Equivalent Back Leg Red Meat)  \\\n1                                                 7.18   \n2                                                 9.73   \n3                                                 8.61   \n4                                                12.34   \n5                                                 5.37   \n..                                                 ...   \n156                                               9.42   \n157                                               9.49   \n158                                              11.24   \n159                                               8.37   \n160                                               6.46   \n\n    Toyota Corolla 1.6l 97kW Comfort (Or Equivalent New Car)  \\\n1                                             19305.29         \n2                                             20874.72         \n3                                             20898.83         \n4                                             24402.77         \n5                                             17238.13         \n..                                                 ...         \n156                                           15221.84         \n157                                            15239.2         \n158                                           15066.62         \n159                                           23071.86         \n160                                           25324.92         \n\n    Preschool (or Kindergarten), Full Day, Private, Monthly for 1 Child  \\\n1                                               411.83                    \n2                                               282.94                    \n3                                               212.18                    \n4                                                351.6                    \n5                                               210.52                    \n..                                                 ...                    \n156                                            1250.41                    \n157                                            1190.12                    \n158                                            1389.43                    \n159                                              55.41                    \n160                                             276.63                    \n\n    International Primary School, Yearly for 1 Child  \n1                                            5388.86  \n2                                            6905.43  \n3                                            4948.41  \n4                                             1641.0  \n5                                             2679.3  \n..                                               ...  \n156                                         12874.09  \n157                                         11526.08  \n158                                         11933.55  \n159                                          2132.54  \n160                                          6410.05  \n\n[160 rows x 56 columns]"},"exec_count":23}},"pos":25,"start":1655479428186,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428214,"exec_count":24,"id":"cb6df7","input":"#everything below is for costofliving1 in order! ↓↓","kernel":"ds_env","no_halt":true,"pos":26,"start":1655479428211,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428226,"exec_count":25,"id":"8dedb0","input":"costofliving1 = pd.read_csv('./Project_Data/costofliving.csv')","kernel":"ds_env","no_halt":true,"pos":27,"start":1655479428221,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428236,"exec_count":26,"id":"02a871","input":"costofliving1 = costofliving1.drop(['Rank'],axis=1)","kernel":"ds_env","no_halt":true,"pos":28,"start":1655479428233,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428280,"exec_count":27,"id":"7fef55","input":"costofliving1","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>City</th>\n      <th>Cost of Living Index</th>\n      <th>Rent Index</th>\n      <th>Cost of Living Plus Rent Index</th>\n      <th>Groceries Index</th>\n      <th>Restaurant Price Index</th>\n      <th>Local Purchasing Power Index</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Hamilton, Bermuda</td>\n      <td>149.02</td>\n      <td>96.10</td>\n      <td>124.22</td>\n      <td>157.89</td>\n      <td>155.22</td>\n      <td>79.43</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Zurich, Switzerland</td>\n      <td>131.24</td>\n      <td>69.26</td>\n      <td>102.19</td>\n      <td>136.14</td>\n      <td>132.52</td>\n      <td>129.79</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Basel, Switzerland</td>\n      <td>130.93</td>\n      <td>49.38</td>\n      <td>92.70</td>\n      <td>137.07</td>\n      <td>130.95</td>\n      <td>111.53</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Zug, Switzerland</td>\n      <td>128.13</td>\n      <td>72.12</td>\n      <td>101.87</td>\n      <td>132.61</td>\n      <td>130.93</td>\n      <td>143.40</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Lugano, Switzerland</td>\n      <td>123.99</td>\n      <td>44.99</td>\n      <td>86.96</td>\n      <td>129.17</td>\n      <td>119.80</td>\n      <td>111.96</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>573</th>\n      <td>Kanpur, India</td>\n      <td>20.79</td>\n      <td>3.60</td>\n      <td>12.73</td>\n      <td>22.19</td>\n      <td>13.31</td>\n      <td>38.83</td>\n    </tr>\n    <tr>\n      <th>574</th>\n      <td>Karachi, Pakistan</td>\n      <td>20.75</td>\n      <td>4.84</td>\n      <td>13.29</td>\n      <td>18.48</td>\n      <td>15.21</td>\n      <td>29.16</td>\n    </tr>\n    <tr>\n      <th>575</th>\n      <td>Rawalpindi, Pakistan</td>\n      <td>20.52</td>\n      <td>4.78</td>\n      <td>13.14</td>\n      <td>18.51</td>\n      <td>16.18</td>\n      <td>22.91</td>\n    </tr>\n    <tr>\n      <th>576</th>\n      <td>Multan, Pakistan</td>\n      <td>18.68</td>\n      <td>2.94</td>\n      <td>11.30</td>\n      <td>18.37</td>\n      <td>11.80</td>\n      <td>25.09</td>\n    </tr>\n    <tr>\n      <th>577</th>\n      <td>Peshawar, Pakistan</td>\n      <td>18.55</td>\n      <td>2.37</td>\n      <td>10.97</td>\n      <td>16.62</td>\n      <td>14.39</td>\n      <td>26.00</td>\n    </tr>\n  </tbody>\n</table>\n<p>578 rows × 7 columns</p>\n</div>","text/plain":"                     City  Cost of Living Index  Rent Index  \\\n0       Hamilton, Bermuda                149.02       96.10   \n1     Zurich, Switzerland                131.24       69.26   \n2      Basel, Switzerland                130.93       49.38   \n3        Zug, Switzerland                128.13       72.12   \n4     Lugano, Switzerland                123.99       44.99   \n..                    ...                   ...         ...   \n573         Kanpur, India                 20.79        3.60   \n574     Karachi, Pakistan                 20.75        4.84   \n575  Rawalpindi, Pakistan                 20.52        4.78   \n576      Multan, Pakistan                 18.68        2.94   \n577    Peshawar, Pakistan                 18.55        2.37   \n\n     Cost of Living Plus Rent Index  Groceries Index  Restaurant Price Index  \\\n0                            124.22           157.89                  155.22   \n1                            102.19           136.14                  132.52   \n2                             92.70           137.07                  130.95   \n3                            101.87           132.61                  130.93   \n4                             86.96           129.17                  119.80   \n..                              ...              ...                     ...   \n573                           12.73            22.19                   13.31   \n574                           13.29            18.48                   15.21   \n575                           13.14            18.51                   16.18   \n576                           11.30            18.37                   11.80   \n577                           10.97            16.62                   14.39   \n\n     Local Purchasing Power Index  \n0                           79.43  \n1                          129.79  \n2                          111.53  \n3                          143.40  \n4                          111.96  \n..                            ...  \n573                         38.83  \n574                         29.16  \n575                         22.91  \n576                         25.09  \n577                         26.00  \n\n[578 rows x 7 columns]"},"exec_count":27}},"pos":29,"scrolled":true,"start":1655479428278,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428290,"exec_count":28,"id":"b065cb","input":"#Final merged data set below! ↓↓","kernel":"ds_env","no_halt":true,"pos":30,"start":1655479428287,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428307,"exec_count":29,"id":"2cc59e","input":"#merged set = 'merged_costofliving'","kernel":"ds_env","no_halt":true,"pos":31,"start":1655479428301,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428337,"exec_count":30,"id":"cf4ef8","input":"merged_costofliving = pd.merge(costofliving1, costofliving2, on= 'City') #merging data sets","kernel":"ds_env","no_halt":true,"pos":32,"start":1655479428317,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428393,"exec_count":31,"id":"b43922","input":"merged_costofliving ","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>City</th>\n      <th>Cost of Living Index</th>\n      <th>Rent Index</th>\n      <th>Cost of Living Plus Rent Index</th>\n      <th>Groceries Index</th>\n      <th>Restaurant Price Index</th>\n      <th>Local Purchasing Power Index</th>\n      <th>Meal, Inexpensive Restaurant</th>\n      <th>Meal for 2 People, Mid-range Restaurant, Three-course</th>\n      <th>McMeal at McDonalds (or Equivalent Combo Meal)</th>\n      <th>...</th>\n      <th>Lettuce (1 head)</th>\n      <th>Cappuccino (regular)</th>\n      <th>Rice (white), (1kg)</th>\n      <th>Tomato (1kg)</th>\n      <th>Banana (1kg)</th>\n      <th>Onion (1kg)</th>\n      <th>Beef Round (1kg) (or Equivalent Back Leg Red Meat)</th>\n      <th>Toyota Corolla 1.6l 97kW Comfort (Or Equivalent New Car)</th>\n      <th>Preschool (or Kindergarten), Full Day, Private, Monthly for 1 Child</th>\n      <th>International Primary School, Yearly for 1 Child</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Zurich, Switzerland</td>\n      <td>131.24</td>\n      <td>69.26</td>\n      <td>102.19</td>\n      <td>136.14</td>\n      <td>132.52</td>\n      <td>129.79</td>\n      <td>23.12</td>\n      <td>92.46</td>\n      <td>12.94</td>\n      <td>...</td>\n      <td>2.58</td>\n      <td>4.66</td>\n      <td>2.52</td>\n      <td>3.79</td>\n      <td>2.89</td>\n      <td>2.69</td>\n      <td>46.09</td>\n      <td>21449.95</td>\n      <td>2194.64</td>\n      <td>28414.08</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Beirut, Lebanon</td>\n      <td>120.47</td>\n      <td>27.76</td>\n      <td>77.01</td>\n      <td>141.33</td>\n      <td>116.95</td>\n      <td>15.40</td>\n      <td>8.98</td>\n      <td>53.91</td>\n      <td>7.19</td>\n      <td>...</td>\n      <td>0.85</td>\n      <td>3.82</td>\n      <td>1.46</td>\n      <td>1.09</td>\n      <td>1.2</td>\n      <td>0.87</td>\n      <td>11.51</td>\n      <td>18766.59</td>\n      <td>348.27</td>\n      <td>4684.61</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Oslo, Norway</td>\n      <td>102.33</td>\n      <td>46.39</td>\n      <td>76.11</td>\n      <td>97.62</td>\n      <td>111.54</td>\n      <td>85.18</td>\n      <td>18.7</td>\n      <td>80.88</td>\n      <td>11.12</td>\n      <td>...</td>\n      <td>2.02</td>\n      <td>4.28</td>\n      <td>2.43</td>\n      <td>3.05</td>\n      <td>2.21</td>\n      <td>1.61</td>\n      <td>25.58</td>\n      <td>31245.91</td>\n      <td>319.19</td>\n      <td>10981.56</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>New York, NY, United States</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>17.97</td>\n      <td>76.37</td>\n      <td>8.09</td>\n      <td>...</td>\n      <td>1.94</td>\n      <td>4.22</td>\n      <td>5.7</td>\n      <td>5.33</td>\n      <td>2.17</td>\n      <td>3.07</td>\n      <td>13.56</td>\n      <td>18118.42</td>\n      <td>2106.38</td>\n      <td>34441.93</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Reykjavik, Iceland</td>\n      <td>97.61</td>\n      <td>46.27</td>\n      <td>73.55</td>\n      <td>91.92</td>\n      <td>105.77</td>\n      <td>74.84</td>\n      <td>17.96</td>\n      <td>109.16</td>\n      <td>11.64</td>\n      <td>...</td>\n      <td>2.2</td>\n      <td>4.11</td>\n      <td>2.37</td>\n      <td>3.37</td>\n      <td>1.66</td>\n      <td>1.42</td>\n      <td>20.84</td>\n      <td>30138.76</td>\n      <td>245.58</td>\n      <td>6731.73</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>151</th>\n      <td>Ankara, Turkey</td>\n      <td>27.17</td>\n      <td>6.31</td>\n      <td>17.39</td>\n      <td>21.43</td>\n      <td>17.97</td>\n      <td>39.07</td>\n      <td>3.82</td>\n      <td>15.28</td>\n      <td>3.51</td>\n      <td>...</td>\n      <td>0.53</td>\n      <td>1.7</td>\n      <td>1.26</td>\n      <td>0.79</td>\n      <td>1.78</td>\n      <td>0.51</td>\n      <td>9.24</td>\n      <td>20134.24</td>\n      <td>242.55</td>\n      <td>5303.45</td>\n    </tr>\n    <tr>\n      <th>152</th>\n      <td>Hyderabad, India</td>\n      <td>26.61</td>\n      <td>6.47</td>\n      <td>17.17</td>\n      <td>29.69</td>\n      <td>18.17</td>\n      <td>51.21</td>\n      <td>1.9</td>\n      <td>8.86</td>\n      <td>3.8</td>\n      <td>...</td>\n      <td>0.57</td>\n      <td>1.17</td>\n      <td>0.65</td>\n      <td>0.44</td>\n      <td>0.57</td>\n      <td>0.33</td>\n      <td>4.16</td>\n      <td>21345.77</td>\n      <td>60.32</td>\n      <td>1715.91</td>\n    </tr>\n    <tr>\n      <th>153</th>\n      <td>Chennai, India</td>\n      <td>26.08</td>\n      <td>6.76</td>\n      <td>17.02</td>\n      <td>28.88</td>\n      <td>16.98</td>\n      <td>46.31</td>\n      <td>1.52</td>\n      <td>7.59</td>\n      <td>3.35</td>\n      <td>...</td>\n      <td>0.36</td>\n      <td>1.3</td>\n      <td>0.67</td>\n      <td>0.41</td>\n      <td>0.78</td>\n      <td>0.45</td>\n      <td>4.17</td>\n      <td>21604.75</td>\n      <td>51.12</td>\n      <td>1470.3</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>Ahmedabad, India</td>\n      <td>26.01</td>\n      <td>5.93</td>\n      <td>16.59</td>\n      <td>28.52</td>\n      <td>19.15</td>\n      <td>39.11</td>\n      <td>1.9</td>\n      <td>8.86</td>\n      <td>3.16</td>\n      <td>...</td>\n      <td>0.49</td>\n      <td>1.4</td>\n      <td>0.74</td>\n      <td>0.41</td>\n      <td>0.48</td>\n      <td>0.33</td>\n      <td>5.7</td>\n      <td>20809.53</td>\n      <td>51.34</td>\n      <td>1218.73</td>\n    </tr>\n    <tr>\n      <th>155</th>\n      <td>Kolkata, India</td>\n      <td>25.99</td>\n      <td>5.57</td>\n      <td>16.42</td>\n      <td>28.24</td>\n      <td>18.89</td>\n      <td>44.66</td>\n      <td>2.53</td>\n      <td>10.76</td>\n      <td>3.79</td>\n      <td>...</td>\n      <td>0.32</td>\n      <td>1.38</td>\n      <td>0.59</td>\n      <td>0.43</td>\n      <td>0.6</td>\n      <td>0.36</td>\n      <td>4.15</td>\n      <td>19667.56</td>\n      <td>37.06</td>\n      <td>1126.1</td>\n    </tr>\n  </tbody>\n</table>\n<p>156 rows × 62 columns</p>\n</div>","text/plain":"                            City  Cost of Living Index  Rent Index  \\\n0            Zurich, Switzerland                131.24       69.26   \n1                Beirut, Lebanon                120.47       27.76   \n2                   Oslo, Norway                102.33       46.39   \n3    New York, NY, United States                100.00      100.00   \n4             Reykjavik, Iceland                 97.61       46.27   \n..                           ...                   ...         ...   \n151               Ankara, Turkey                 27.17        6.31   \n152             Hyderabad, India                 26.61        6.47   \n153               Chennai, India                 26.08        6.76   \n154             Ahmedabad, India                 26.01        5.93   \n155               Kolkata, India                 25.99        5.57   \n\n     Cost of Living Plus Rent Index  Groceries Index  Restaurant Price Index  \\\n0                            102.19           136.14                  132.52   \n1                             77.01           141.33                  116.95   \n2                             76.11            97.62                  111.54   \n3                            100.00           100.00                  100.00   \n4                             73.55            91.92                  105.77   \n..                              ...              ...                     ...   \n151                           17.39            21.43                   17.97   \n152                           17.17            29.69                   18.17   \n153                           17.02            28.88                   16.98   \n154                           16.59            28.52                   19.15   \n155                           16.42            28.24                   18.89   \n\n     Local Purchasing Power Index Meal, Inexpensive Restaurant  \\\n0                          129.79                        23.12   \n1                           15.40                         8.98   \n2                           85.18                         18.7   \n3                          100.00                        17.97   \n4                           74.84                        17.96   \n..                            ...                          ...   \n151                         39.07                         3.82   \n152                         51.21                          1.9   \n153                         46.31                         1.52   \n154                         39.11                          1.9   \n155                         44.66                         2.53   \n\n    Meal for 2 People, Mid-range Restaurant, Three-course  \\\n0                                                92.46      \n1                                                53.91      \n2                                                80.88      \n3                                                76.37      \n4                                               109.16      \n..                                                 ...      \n151                                              15.28      \n152                                               8.86      \n153                                               7.59      \n154                                               8.86      \n155                                              10.76      \n\n    McMeal at McDonalds (or Equivalent Combo Meal)  ... Lettuce (1 head)  \\\n0                                            12.94  ...             2.58   \n1                                             7.19  ...             0.85   \n2                                            11.12  ...             2.02   \n3                                             8.09  ...             1.94   \n4                                            11.64  ...              2.2   \n..                                             ...  ...              ...   \n151                                           3.51  ...             0.53   \n152                                            3.8  ...             0.57   \n153                                           3.35  ...             0.36   \n154                                           3.16  ...             0.49   \n155                                           3.79  ...             0.32   \n\n    Cappuccino (regular) Rice (white), (1kg) Tomato (1kg) Banana (1kg)  \\\n0                   4.66                2.52         3.79         2.89   \n1                   3.82                1.46         1.09          1.2   \n2                   4.28                2.43         3.05         2.21   \n3                   4.22                 5.7         5.33         2.17   \n4                   4.11                2.37         3.37         1.66   \n..                   ...                 ...          ...          ...   \n151                  1.7                1.26         0.79         1.78   \n152                 1.17                0.65         0.44         0.57   \n153                  1.3                0.67         0.41         0.78   \n154                  1.4                0.74         0.41         0.48   \n155                 1.38                0.59         0.43          0.6   \n\n    Onion (1kg) Beef Round (1kg) (or Equivalent Back Leg Red Meat)  \\\n0          2.69                                              46.09   \n1          0.87                                              11.51   \n2          1.61                                              25.58   \n3          3.07                                              13.56   \n4          1.42                                              20.84   \n..          ...                                                ...   \n151        0.51                                               9.24   \n152        0.33                                               4.16   \n153        0.45                                               4.17   \n154        0.33                                                5.7   \n155        0.36                                               4.15   \n\n    Toyota Corolla 1.6l 97kW Comfort (Or Equivalent New Car)  \\\n0                                             21449.95         \n1                                             18766.59         \n2                                             31245.91         \n3                                             18118.42         \n4                                             30138.76         \n..                                                 ...         \n151                                           20134.24         \n152                                           21345.77         \n153                                           21604.75         \n154                                           20809.53         \n155                                           19667.56         \n\n    Preschool (or Kindergarten), Full Day, Private, Monthly for 1 Child  \\\n0                                              2194.64                    \n1                                               348.27                    \n2                                               319.19                    \n3                                              2106.38                    \n4                                               245.58                    \n..                                                 ...                    \n151                                             242.55                    \n152                                              60.32                    \n153                                              51.12                    \n154                                              51.34                    \n155                                              37.06                    \n\n    International Primary School, Yearly for 1 Child  \n0                                           28414.08  \n1                                            4684.61  \n2                                           10981.56  \n3                                           34441.93  \n4                                            6731.73  \n..                                               ...  \n151                                          5303.45  \n152                                          1715.91  \n153                                           1470.3  \n154                                          1218.73  \n155                                           1126.1  \n\n[156 rows x 62 columns]"},"exec_count":31}},"pos":33,"start":1655479428349,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428468,"exec_count":32,"id":"c36a93","input":"import seaborn as sns","kernel":"ds_env","no_halt":true,"pos":34,"start":1655479428401,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428493,"exec_count":33,"id":"39b8f8","input":"#cleaning the data -- dropping missing and duplicate values for sanity\nmerged_costofliving.dropna(inplace = True) # dropping missing values\nmerged_costofliving.drop_duplicates(inplace = True) # dropping duplicate values here\nmerged_costofliving = merged_costofliving.reset_index(drop=True) # resetting the index\n\nlength = len(merged_costofliving.index) #save length of array of later","kernel":"ds_env","no_halt":true,"pos":35,"start":1655479428477,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428771,"exec_count":34,"id":"a7fd83","input":"sns.heatmap(merged_costofliving.corr())","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":34},"1":{"data":{"image/png":"ca16c82e0a9b7eda3303cca1c2a09aa79b2cad66","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":36,"start":1655479428497,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428797,"exec_count":35,"id":"9b29cc","input":"merged_costofliving.isnull().sum()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"City                                                                   0\nCost of Living Index                                                   0\nRent Index                                                             0\nCost of Living Plus Rent Index                                         0\nGroceries Index                                                        0\n                                                                      ..\nOnion (1kg)                                                            0\nBeef Round (1kg) (or Equivalent Back Leg Red Meat)                     0\nToyota Corolla 1.6l 97kW Comfort (Or Equivalent New Car)               0\nPreschool (or Kindergarten), Full Day, Private, Monthly for 1 Child    0\nInternational Primary School, Yearly for 1 Child                       0\nLength: 62, dtype: int64"},"exec_count":35}},"pos":37,"start":1655479428793,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428808,"exec_count":36,"id":"b1f08d","input":"print(merged_costofliving.shape)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"(156, 62)\n"}},"pos":38,"start":1655479428801,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428840,"exec_count":37,"id":"7073ca","input":"merged_costofliving.info()","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 156 entries, 0 to 155\nData columns (total 62 columns):\n #   Column                                                                      Non-Null Count  Dtype  \n---  ------                                                                      --------------  -----  \n 0   City                                                                        156 non-null    object \n 1   Cost of Living Index                                                        156 non-null    float64\n 2   Rent Index                                                                  156 non-null    float64\n 3   Cost of Living Plus Rent Index                                              156 non-null    float64\n 4   Groceries Index                                                             156 non-null    float64\n 5   Restaurant Price Index                                                      156 non-null    float64\n 6   Local Purchasing Power Index                                                156 non-null    float64\n 7   Meal, Inexpensive Restaurant                                                156 non-null    object \n 8   Meal for 2 People, Mid-range Restaurant, Three-course                       156 non-null    object \n 9   McMeal at McDonalds (or Equivalent Combo Meal)                              156 non-null    object \n 10  Domestic Beer (0.5 liter draught)                                           156 non-null    object \n 11  Imported Beer (0.33 liter bottle)                                           156 non-null    object \n 12  Coke/Pepsi (0.33 liter bottle)                                              156 non-null    object \n 13  Water (0.33 liter bottle)                                                   156 non-null    object \n 14  Milk (regular), (1 liter)                                                   156 non-null    object \n 15  Loaf of Fresh White Bread (500g)                                            156 non-null    object \n 16  Eggs (regular) (12)                                                         156 non-null    object \n 17  Local Cheese (1kg)                                                          156 non-null    object \n 18  Water (1.5 liter bottle)                                                    156 non-null    object \n 19  Bottle of Wine (Mid-Range)                                                  156 non-null    object \n 20  Domestic Beer (0.5 liter bottle)                                            156 non-null    object \n 21  Imported Beer (0.33 liter bottle)                                           156 non-null    object \n 22  Cigarettes 20 Pack (Marlboro)                                               156 non-null    object \n 23  One-way Ticket (Local Transport)                                            156 non-null    object \n 24  Chicken Breasts (Boneless, Skinless), (1kg)                                 156 non-null    object \n 25  Monthly Pass (Regular Price)                                                156 non-null    object \n 26  Gasoline (1 liter)                                                          156 non-null    object \n 27  Volkswagen Golf                                                             156 non-null    object \n 28  Apartment (1 bedroom) in City Centre                                        156 non-null    object \n 29  Apartment (1 bedroom) Outside of Centre                                     156 non-null    object \n 30  Apartment (3 bedrooms) in City Centre                                       156 non-null    object \n 31  Apartment (3 bedrooms) Outside of Centre                                    156 non-null    object \n 32  Basic (Electricity, Heating, Cooling, Water, Garbage) for 85m2 Apartment    156 non-null    object \n 33  1 min. of Prepaid Mobile Tariff Local (No Discounts or Plans)               156 non-null    object \n 34  Internet (60 Mbps or More, Unlimited Data, Cable/ADSL)                      156 non-null    object \n 35  Fitness Club, Monthly Fee for 1 Adult                                       156 non-null    object \n 36  Tennis Court Rent (1 Hour on Weekend)                                       156 non-null    object \n 37  Cinema, International Release, 1 Seat                                       156 non-null    object \n 38  1 Pair of Jeans (Levis 501 Or Similar)                                      156 non-null    object \n 39  1 Summer Dress in a Chain Store (Zara, H&M, ...)                            156 non-null    object \n 40  1 Pair of Nike Running Shoes (Mid-Range)                                    156 non-null    object \n 41  1 Pair of Men Leather Business Shoes                                        156 non-null    object \n 42  Price per Square Meter to Buy Apartment in City Centre                      156 non-null    object \n 43  Price per Square Meter to Buy Apartment Outside of Centre                   156 non-null    object \n 44  Average Monthly Net Salary (After Tax)                                      156 non-null    object \n 45  Mortgage Interest Rate in Percentages (%), Yearly, for 20 Years Fixed-Rate  156 non-null    object \n 46  Taxi Start (Normal Tariff)                                                  156 non-null    object \n 47  Taxi 1km (Normal Tariff)                                                    156 non-null    object \n 48  Taxi 1hour Waiting (Normal Tariff)                                          156 non-null    object \n 49  Apples (1kg)                                                                156 non-null    object \n 50  Oranges (1kg)                                                               156 non-null    object \n 51  Potato (1kg)                                                                156 non-null    object \n 52  Lettuce (1 head)                                                            156 non-null    object \n 53  Cappuccino (regular)                                                        156 non-null    object \n 54  Rice (white), (1kg)                                                         156 non-null    object \n 55  Tomato (1kg)                                                                156 non-null    object \n 56  Banana (1kg)                                                                156 non-null    object \n 57  Onion (1kg)                                                                 156 non-null    object \n 58  Beef Round (1kg) (or Equivalent Back Leg Red Meat)                          156 non-null    object \n 59  Toyota Corolla 1.6l 97kW Comfort (Or Equivalent New Car)                    156 non-null    object \n 60  Preschool (or Kindergarten), Full Day, Private, Monthly for 1 Child         156 non-null    object \n 61  International Primary School, Yearly for 1 Child                            156 non-null    object \ndtypes: float64(6), object(56)\nmemory usage: 75.7+ KB\n"}},"pos":39,"start":1655479428812,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428853,"exec_count":38,"id":"ac943a","input":"#code to remove unnecessary columns\nmerged_costofliving_mod1 = merged_costofliving.drop(['Water (0.33 liter bottle) ', 'Milk (regular), (1 liter)','Water (1.5 liter bottle)',\n                                                     'Cigarettes 20 Pack (Marlboro)','Volkswagen Golf',\n                                                     '1 min. of Prepaid Mobile Tariff Local (No Discounts or Plans)',\n                                                     'Cinema, International Release, 1 Seat','1 Pair of Jeans (Levis 501 Or Similar)',\n                                                     '1 Summer Dress in a Chain Store (Zara, H&M, ...)',\n                                                     '1 Pair of Nike Running Shoes (Mid-Range)','1 Pair of Men Leather Business Shoes',\n                                                     'Mortgage Interest Rate in Percentages (%), Yearly, for 20 Years Fixed-Rate',\n                                                     'Toyota Corolla 1.6l 97kW Comfort (Or Equivalent New Car)', 'Apples (1kg)', 'Oranges (1kg)',\n                                                     'Potato (1kg)', 'Lettuce (1 head)','Cappuccino (regular)', 'Rice (white), (1kg)', 'Tomato (1kg)',\n                                                     'Banana (1kg)', 'Onion (1kg)','Beef Round (1kg) (or Equivalent Back Leg Red Meat)',\n                                                    'Domestic Beer (0.5 liter draught)', 'Imported Beer (0.33 liter bottle)',\n                                                     'Coke/Pepsi (0.33 liter bottle)', 'Loaf of Fresh White Bread (500g)', 'Eggs (regular) (12)', \n                                                     'Local Cheese (1kg)', 'Bottle of Wine (Mid-Range)', 'Domestic Beer (0.5 liter bottle)',\n                                                     'Imported Beer (0.33 liter bottle)', 'Chicken Breasts (Boneless, Skinless), (1kg)',\n                                                    'Tennis Court Rent (1 Hour on Weekend)'], axis = 'columns')","kernel":"ds_env","no_halt":true,"pos":40,"start":1655479428846,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428873,"exec_count":39,"id":"0c0753","input":"merged_costofliving_mod1.info()","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 156 entries, 0 to 155\nData columns (total 28 columns):\n #   Column                                                                    Non-Null Count  Dtype  \n---  ------                                                                    --------------  -----  \n 0   City                                                                      156 non-null    object \n 1   Cost of Living Index                                                      156 non-null    float64\n 2   Rent Index                                                                156 non-null    float64\n 3   Cost of Living Plus Rent Index                                            156 non-null    float64\n 4   Groceries Index                                                           156 non-null    float64\n 5   Restaurant Price Index                                                    156 non-null    float64\n 6   Local Purchasing Power Index                                              156 non-null    float64\n 7   Meal, Inexpensive Restaurant                                              156 non-null    object \n 8   Meal for 2 People, Mid-range Restaurant, Three-course                     156 non-null    object \n 9   McMeal at McDonalds (or Equivalent Combo Meal)                            156 non-null    object \n 10  One-way Ticket (Local Transport)                                          156 non-null    object \n 11  Monthly Pass (Regular Price)                                              156 non-null    object \n 12  Gasoline (1 liter)                                                        156 non-null    object \n 13  Apartment (1 bedroom) in City Centre                                      156 non-null    object \n 14  Apartment (1 bedroom) Outside of Centre                                   156 non-null    object \n 15  Apartment (3 bedrooms) in City Centre                                     156 non-null    object \n 16  Apartment (3 bedrooms) Outside of Centre                                  156 non-null    object \n 17  Basic (Electricity, Heating, Cooling, Water, Garbage) for 85m2 Apartment  156 non-null    object \n 18  Internet (60 Mbps or More, Unlimited Data, Cable/ADSL)                    156 non-null    object \n 19  Fitness Club, Monthly Fee for 1 Adult                                     156 non-null    object \n 20  Price per Square Meter to Buy Apartment in City Centre                    156 non-null    object \n 21  Price per Square Meter to Buy Apartment Outside of Centre                 156 non-null    object \n 22  Average Monthly Net Salary (After Tax)                                    156 non-null    object \n 23  Taxi Start (Normal Tariff)                                                156 non-null    object \n 24  Taxi 1km (Normal Tariff)                                                  156 non-null    object \n 25  Taxi 1hour Waiting (Normal Tariff)                                        156 non-null    object \n 26  Preschool (or Kindergarten), Full Day, Private, Monthly for 1 Child       156 non-null    object \n 27  International Primary School, Yearly for 1 Child                          156 non-null    object \ndtypes: float64(6), object(22)\nmemory usage: 34.2+ KB\n"}},"pos":41,"start":1655479428861,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428884,"exec_count":40,"id":"f11d56","input":"merged_costofliving_mod1.columns","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"Index(['City', 'Cost of Living Index', 'Rent Index',\n       'Cost of Living Plus Rent Index', 'Groceries Index',\n       'Restaurant Price Index', 'Local Purchasing Power Index',\n       'Meal, Inexpensive Restaurant',\n       'Meal for 2 People, Mid-range Restaurant, Three-course',\n       'McMeal at McDonalds (or Equivalent Combo Meal)',\n       'One-way Ticket (Local Transport)', 'Monthly Pass (Regular Price)',\n       'Gasoline (1 liter)', 'Apartment (1 bedroom) in City Centre',\n       'Apartment (1 bedroom) Outside of Centre',\n       'Apartment (3 bedrooms) in City Centre',\n       'Apartment (3 bedrooms) Outside of Centre',\n       'Basic (Electricity, Heating, Cooling, Water, Garbage) for 85m2 Apartment',\n       'Internet (60 Mbps or More, Unlimited Data, Cable/ADSL)',\n       'Fitness Club, Monthly Fee for 1 Adult',\n       'Price per Square Meter to Buy Apartment in City Centre',\n       'Price per Square Meter to Buy Apartment Outside of Centre',\n       'Average Monthly Net Salary (After Tax)', 'Taxi Start (Normal Tariff)',\n       'Taxi 1km (Normal Tariff)', 'Taxi 1hour Waiting (Normal Tariff)',\n       'Preschool (or Kindergarten), Full Day, Private, Monthly for 1 Child',\n       'International Primary School, Yearly for 1 Child'],\n      dtype='object')"},"exec_count":40}},"pos":42,"start":1655479428877,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479428920,"exec_count":41,"id":"86a5e8","input":"#code to convert column objects into floats/numbers\n\nmerged_costofliving_mod1[['Cost of Living Index', 'Rent Index',\n       'Cost of Living Plus Rent Index', 'Groceries Index',\n       'Restaurant Price Index', 'Local Purchasing Power Index',\n       'Meal, Inexpensive Restaurant',\n       'Meal for 2 People, Mid-range Restaurant, Three-course',\n       'McMeal at McDonalds (or Equivalent Combo Meal)',\n       'One-way Ticket (Local Transport)', 'Monthly Pass (Regular Price)',\n       'Gasoline (1 liter)', 'Apartment (1 bedroom) in City Centre',\n       'Apartment (1 bedroom) Outside of Centre',\n       'Apartment (3 bedrooms) in City Centre',\n       'Apartment (3 bedrooms) Outside of Centre',\n       'Basic (Electricity, Heating, Cooling, Water, Garbage) for 85m2 Apartment',\n       'Internet (60 Mbps or More, Unlimited Data, Cable/ADSL)',\n       'Fitness Club, Monthly Fee for 1 Adult',\n       'Price per Square Meter to Buy Apartment in City Centre',\n       'Price per Square Meter to Buy Apartment Outside of Centre',\n       'Average Monthly Net Salary (After Tax)', 'Taxi Start (Normal Tariff)',\n       'Taxi 1km (Normal Tariff)', 'Taxi 1hour Waiting (Normal Tariff)',\n       'Preschool (or Kindergarten), Full Day, Private, Monthly for 1 Child',\n       'International Primary School, Yearly for 1 Child']] = merged_costofliving_mod1[['Cost of Living Index', 'Rent Index',\n       'Cost of Living Plus Rent Index', 'Groceries Index',\n       'Restaurant Price Index', 'Local Purchasing Power Index',\n       'Meal, Inexpensive Restaurant',\n       'Meal for 2 People, Mid-range Restaurant, Three-course',\n       'McMeal at McDonalds (or Equivalent Combo Meal)',\n       'One-way Ticket (Local Transport)', 'Monthly Pass (Regular Price)',\n       'Gasoline (1 liter)', 'Apartment (1 bedroom) in City Centre',\n       'Apartment (1 bedroom) Outside of Centre',\n       'Apartment (3 bedrooms) in City Centre',\n       'Apartment (3 bedrooms) Outside of Centre',\n       'Basic (Electricity, Heating, Cooling, Water, Garbage) for 85m2 Apartment',\n       'Internet (60 Mbps or More, Unlimited Data, Cable/ADSL)',\n       'Fitness Club, Monthly Fee for 1 Adult',\n       'Price per Square Meter to Buy Apartment in City Centre',\n       'Price per Square Meter to Buy Apartment Outside of Centre',\n       'Average Monthly Net Salary (After Tax)', 'Taxi Start (Normal Tariff)',\n       'Taxi 1km (Normal Tariff)', 'Taxi 1hour Waiting (Normal Tariff)',\n       'Preschool (or Kindergarten), Full Day, Private, Monthly for 1 Child',\n       'International Primary School, Yearly for 1 Child']].apply(pd.to_numeric)","kernel":"ds_env","no_halt":true,"pos":43,"start":1655479428907,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479429830,"exec_count":42,"id":"f679a7","input":"plt.figure(figsize = (15,8))\nsns.heatmap(merged_costofliving_mod1.corr())","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":42},"1":{"data":{"image/png":"a87c215a2568e2b6c53b085dcd1ca0ff5e549695","text/plain":"<Figure size 1080x576 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":44,"scrolled":true,"start":1655479428924,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479429841,"exec_count":43,"id":"c7e645","input":"from sklearn.preprocessing import OneHotEncoder","kernel":"ds_env","no_halt":true,"pos":45,"start":1655479429838,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479429854,"exec_count":44,"id":"2956f7","input":"merged_costofliving_mod1[['City']].values","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"array([['Zurich, Switzerland'],\n       ['Beirut, Lebanon'],\n       ['Oslo, Norway'],\n       ['New York, NY, United States'],\n       ['Reykjavik, Iceland'],\n       ['Tel Aviv-Yafo, Israel'],\n       ['San Francisco, CA, United States'],\n       ['Seattle, WA, United States'],\n       ['Copenhagen, Denmark'],\n       ['Jerusalem, Israel'],\n       ['London, United Kingdom'],\n       ['Tokyo, Japan'],\n       ['Boston, MA, United States'],\n       ['Paris, France'],\n       ['Singapore, Singapore'],\n       ['Sydney, Australia'],\n       ['Amsterdam, Netherlands'],\n       ['Hong Kong, Hong Kong'],\n       ['Auckland, New Zealand'],\n       ['Utrecht, Netherlands'],\n       ['Brisbane, Australia'],\n       ['Los Angeles, CA, United States'],\n       ['Dublin, Ireland'],\n       ['Stockholm, Sweden'],\n       ['Seoul, South Korea'],\n       ['Eindhoven, Netherlands'],\n       ['Munich, Germany'],\n       ['Perth, Australia'],\n       ['Helsinki, Finland'],\n       ['Chicago, IL, United States'],\n       ['Portland, OR, United States'],\n       ['Melbourne, Australia'],\n       ['Victoria, Canada'],\n       ['Vancouver, Canada'],\n       ['Adelaide, Australia'],\n       ['Rotterdam, Netherlands'],\n       ['San Diego, CA, United States'],\n       ['Milan, Italy'],\n       ['Brussels, Belgium'],\n       ['Toronto, Canada'],\n       ['Calgary, Canada'],\n       ['Ottawa, Canada'],\n       ['Gothenburg, Sweden'],\n       ['Edmonton, Canada'],\n       ['Frankfurt, Germany'],\n       ['Hamburg, Germany'],\n       ['Rome, Italy'],\n       ['Montreal, Canada'],\n       ['Winnipeg, Canada'],\n       ['Phoenix, AZ, United States'],\n       ['Berlin, Germany'],\n       ['Vienna, Austria'],\n       ['Las Vegas, NV, United States'],\n       ['Dallas, TX, United States'],\n       ['Austin, TX, United States'],\n       ['Taipei, Taiwan'],\n       ['Dubai, United Arab Emirates'],\n       ['Houston, TX, United States'],\n       ['Doha, Qatar'],\n       ['Barcelona, Spain'],\n       ['Madrid, Spain'],\n       ['Athens, Greece'],\n       ['Thessaloniki, Greece'],\n       ['Abu Dhabi, United Arab Emirates'],\n       ['Ljubljana, Slovenia'],\n       ['Tallinn, Estonia'],\n       ['Panama City, Panama'],\n       ['Shanghai, China'],\n       ['Valencia, Spain'],\n       ['Amman, Jordan'],\n       ['Montevideo, Uruguay'],\n       ['Prague, Czech Republic'],\n       ['Lisbon, Portugal'],\n       ['Riga, Latvia'],\n       ['Bangkok, Thailand'],\n       ['Zagreb, Croatia'],\n       ['Beijing, China'],\n       ['Bratislava, Slovakia'],\n       ['Porto, Portugal'],\n       ['Brno, Czech Republic'],\n       ['San Jose, Costa Rica'],\n       ['Vilnius, Lithuania'],\n       ['Budapest, Hungary'],\n       ['Santiago, Chile'],\n       ['Johannesburg, South Africa'],\n       ['Kaunas, Lithuania'],\n       ['Santo Domingo, Dominican Republic'],\n       ['Warsaw, Poland'],\n       ['Sofia, Bulgaria'],\n       ['Moscow, Russia'],\n       ['Gdansk, Poland'],\n       ['Krakow (Cracow), Poland'],\n       ['Wroclaw, Poland'],\n       ['Cape Town, South Africa'],\n       ['Jakarta, Indonesia'],\n       ['Manila, Philippines'],\n       ['Poznan, Poland'],\n       ['Quito, Ecuador'],\n       ['Durban, South Africa'],\n       ['Cluj-Napoca, Romania'],\n       ['Bucharest, Romania'],\n       ['Belgrade, Serbia'],\n       ['Podgorica, Montenegro'],\n       ['Kuala Lumpur, Malaysia'],\n       ['Varna, Bulgaria'],\n       ['Ho Chi Minh City, Vietnam'],\n       ['Tirana, Albania'],\n       ['Monterrey, Mexico'],\n       ['Plovdiv, Bulgaria'],\n       ['Sarajevo, Bosnia And Herzegovina'],\n       ['Lodz, Poland'],\n       ['Saint Petersburg, Russia'],\n       ['Banja Luka, Bosnia And Herzegovina'],\n       ['Sao Paulo, Brazil'],\n       ['Novi Sad, Serbia'],\n       ['Mexico City, Mexico'],\n       ['Iasi, Romania'],\n       ['Hanoi, Vietnam'],\n       ['Brasov, Romania'],\n       ['Casablanca, Morocco'],\n       ['Timisoara, Romania'],\n       ['Nairobi, Kenya'],\n       ['Buenos Aires, Argentina'],\n       ['Lima, Peru'],\n       ['Gurgaon, India'],\n       ['Guadalajara, Mexico'],\n       ['Yerevan, Armenia'],\n       ['Colombo, Sri Lanka'],\n       ['Yekaterinburg, Russia'],\n       ['Minsk, Belarus'],\n       ['Cairo, Egypt'],\n       ['Novosibirsk, Russia'],\n       ['Chisinau, Moldova'],\n       ['Baku, Azerbaijan'],\n       ['Istanbul, Turkey'],\n       ['Tbilisi, Georgia'],\n       ['Kharkiv, Ukraine'],\n       ['Chandigarh, India'],\n       ['Almaty, Kazakhstan'],\n       ['Tunis, Tunisia'],\n       ['Kathmandu, Nepal'],\n       ['Lviv, Ukraine'],\n       ['Tashkent, Uzbekistan'],\n       ['Mumbai, India'],\n       ['Noida, India'],\n       ['Alexandria, Egypt'],\n       ['Izmir, Turkey'],\n       ['Delhi, India'],\n       ['Bangalore, India'],\n       ['Bogota, Colombia'],\n       ['Pune, India'],\n       ['Ankara, Turkey'],\n       ['Hyderabad, India'],\n       ['Chennai, India'],\n       ['Ahmedabad, India'],\n       ['Kolkata, India']], dtype=object)"},"exec_count":44}},"pos":46,"start":1655479429846,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479429879,"exec_count":45,"id":"4c26f9","input":"encoder = OneHotEncoder(handle_unknown= 'ignore')\nencoder_df = pd.DataFrame(encoder.fit_transform(merged_costofliving_mod1[['City']]).toarray(), columns=merged_costofliving_mod1[['City']].values)","kernel":"ds_env","no_halt":true,"pos":47,"start":1655479429860,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479429926,"exec_count":46,"id":"251092","input":"encoder_df","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>(Zurich, Switzerland,)</th>\n      <th>(Beirut, Lebanon,)</th>\n      <th>(Oslo, Norway,)</th>\n      <th>(New York, NY, United States,)</th>\n      <th>(Reykjavik, Iceland,)</th>\n      <th>(Tel Aviv-Yafo, Israel,)</th>\n      <th>(San Francisco, CA, United States,)</th>\n      <th>(Seattle, WA, United States,)</th>\n      <th>(Copenhagen, Denmark,)</th>\n      <th>(Jerusalem, Israel,)</th>\n      <th>...</th>\n      <th>(Izmir, Turkey,)</th>\n      <th>(Delhi, India,)</th>\n      <th>(Bangalore, India,)</th>\n      <th>(Bogota, Colombia,)</th>\n      <th>(Pune, India,)</th>\n      <th>(Ankara, Turkey,)</th>\n      <th>(Hyderabad, India,)</th>\n      <th>(Chennai, India,)</th>\n      <th>(Ahmedabad, India,)</th>\n      <th>(Kolkata, India,)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>151</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>152</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>153</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>155</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>156 rows × 156 columns</p>\n</div>","text/plain":"     (Zurich, Switzerland,)  (Beirut, Lebanon,)  (Oslo, Norway,)  \\\n0                       0.0                 0.0              0.0   \n1                       0.0                 0.0              0.0   \n2                       0.0                 0.0              0.0   \n3                       0.0                 0.0              0.0   \n4                       0.0                 0.0              0.0   \n..                      ...                 ...              ...   \n151                     0.0                 0.0              0.0   \n152                     0.0                 0.0              0.0   \n153                     0.0                 0.0              0.0   \n154                     0.0                 0.0              1.0   \n155                     0.0                 0.0              0.0   \n\n     (New York, NY, United States,)  (Reykjavik, Iceland,)  \\\n0                               0.0                    0.0   \n1                               0.0                    0.0   \n2                               0.0                    0.0   \n3                               0.0                    0.0   \n4                               0.0                    0.0   \n..                              ...                    ...   \n151                             0.0                    0.0   \n152                             0.0                    0.0   \n153                             0.0                    0.0   \n154                             0.0                    0.0   \n155                             0.0                    0.0   \n\n     (Tel Aviv-Yafo, Israel,)  (San Francisco, CA, United States,)  \\\n0                         0.0                                  0.0   \n1                         0.0                                  0.0   \n2                         0.0                                  0.0   \n3                         0.0                                  0.0   \n4                         0.0                                  0.0   \n..                        ...                                  ...   \n151                       0.0                                  0.0   \n152                       0.0                                  0.0   \n153                       0.0                                  0.0   \n154                       0.0                                  0.0   \n155                       0.0                                  0.0   \n\n     (Seattle, WA, United States,)  (Copenhagen, Denmark,)  \\\n0                              0.0                     0.0   \n1                              0.0                     0.0   \n2                              0.0                     0.0   \n3                              0.0                     0.0   \n4                              0.0                     0.0   \n..                             ...                     ...   \n151                            1.0                     0.0   \n152                            0.0                     0.0   \n153                            0.0                     0.0   \n154                            0.0                     0.0   \n155                            0.0                     0.0   \n\n     (Jerusalem, Israel,)  ...  (Izmir, Turkey,)  (Delhi, India,)  \\\n0                     0.0  ...               0.0              0.0   \n1                     0.0  ...               0.0              0.0   \n2                     0.0  ...               0.0              0.0   \n3                     0.0  ...               0.0              0.0   \n4                     0.0  ...               0.0              0.0   \n..                    ...  ...               ...              ...   \n151                   0.0  ...               0.0              0.0   \n152                   0.0  ...               0.0              0.0   \n153                   0.0  ...               0.0              0.0   \n154                   0.0  ...               0.0              0.0   \n155                   0.0  ...               0.0              0.0   \n\n     (Bangalore, India,)  (Bogota, Colombia,)  (Pune, India,)  \\\n0                    0.0                  0.0             0.0   \n1                    0.0                  0.0             0.0   \n2                    0.0                  0.0             0.0   \n3                    0.0                  0.0             0.0   \n4                    0.0                  0.0             0.0   \n..                   ...                  ...             ...   \n151                  0.0                  0.0             0.0   \n152                  0.0                  0.0             0.0   \n153                  0.0                  0.0             0.0   \n154                  0.0                  0.0             0.0   \n155                  0.0                  0.0             0.0   \n\n     (Ankara, Turkey,)  (Hyderabad, India,)  (Chennai, India,)  \\\n0                  0.0                  0.0                0.0   \n1                  0.0                  0.0                0.0   \n2                  0.0                  0.0                0.0   \n3                  0.0                  0.0                0.0   \n4                  0.0                  0.0                0.0   \n..                 ...                  ...                ...   \n151                0.0                  0.0                0.0   \n152                0.0                  0.0                0.0   \n153                0.0                  0.0                0.0   \n154                0.0                  0.0                0.0   \n155                0.0                  0.0                0.0   \n\n     (Ahmedabad, India,)  (Kolkata, India,)  \n0                    0.0                1.0  \n1                    0.0                0.0  \n2                    0.0                0.0  \n3                    0.0                0.0  \n4                    0.0                0.0  \n..                   ...                ...  \n151                  0.0                0.0  \n152                  0.0                0.0  \n153                  0.0                0.0  \n154                  0.0                0.0  \n155                  0.0                0.0  \n\n[156 rows x 156 columns]"},"exec_count":46}},"pos":48,"start":1655479429894,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479429962,"exec_count":47,"id":"aadd44","input":"final_df = pd.concat([merged_costofliving_mod1, encoder_df], axis='columns').drop(\"City\", axis=\"columns\")\nfinal_df.head()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Cost of Living Index</th>\n      <th>Rent Index</th>\n      <th>Cost of Living Plus Rent Index</th>\n      <th>Groceries Index</th>\n      <th>Restaurant Price Index</th>\n      <th>Local Purchasing Power Index</th>\n      <th>Meal, Inexpensive Restaurant</th>\n      <th>Meal for 2 People, Mid-range Restaurant, Three-course</th>\n      <th>McMeal at McDonalds (or Equivalent Combo Meal)</th>\n      <th>One-way Ticket (Local Transport)</th>\n      <th>...</th>\n      <th>(Izmir, Turkey,)</th>\n      <th>(Delhi, India,)</th>\n      <th>(Bangalore, India,)</th>\n      <th>(Bogota, Colombia,)</th>\n      <th>(Pune, India,)</th>\n      <th>(Ankara, Turkey,)</th>\n      <th>(Hyderabad, India,)</th>\n      <th>(Chennai, India,)</th>\n      <th>(Ahmedabad, India,)</th>\n      <th>(Kolkata, India,)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>131.24</td>\n      <td>69.26</td>\n      <td>102.19</td>\n      <td>136.14</td>\n      <td>132.52</td>\n      <td>129.79</td>\n      <td>23.12</td>\n      <td>92.46</td>\n      <td>12.94</td>\n      <td>3.88</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>120.47</td>\n      <td>27.76</td>\n      <td>77.01</td>\n      <td>141.33</td>\n      <td>116.95</td>\n      <td>15.40</td>\n      <td>8.98</td>\n      <td>53.91</td>\n      <td>7.19</td>\n      <td>1.19</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>102.33</td>\n      <td>46.39</td>\n      <td>76.11</td>\n      <td>97.62</td>\n      <td>111.54</td>\n      <td>85.18</td>\n      <td>18.70</td>\n      <td>80.88</td>\n      <td>11.12</td>\n      <td>3.64</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>17.97</td>\n      <td>76.37</td>\n      <td>8.09</td>\n      <td>2.47</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>97.61</td>\n      <td>46.27</td>\n      <td>73.55</td>\n      <td>91.92</td>\n      <td>105.77</td>\n      <td>74.84</td>\n      <td>17.96</td>\n      <td>109.16</td>\n      <td>11.64</td>\n      <td>3.42</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 183 columns</p>\n</div>","text/plain":"   Cost of Living Index  Rent Index  Cost of Living Plus Rent Index  \\\n0                131.24       69.26                          102.19   \n1                120.47       27.76                           77.01   \n2                102.33       46.39                           76.11   \n3                100.00      100.00                          100.00   \n4                 97.61       46.27                           73.55   \n\n   Groceries Index  Restaurant Price Index  Local Purchasing Power Index  \\\n0           136.14                  132.52                        129.79   \n1           141.33                  116.95                         15.40   \n2            97.62                  111.54                         85.18   \n3           100.00                  100.00                        100.00   \n4            91.92                  105.77                         74.84   \n\n   Meal, Inexpensive Restaurant  \\\n0                         23.12   \n1                          8.98   \n2                         18.70   \n3                         17.97   \n4                         17.96   \n\n   Meal for 2 People, Mid-range Restaurant, Three-course  \\\n0                                              92.46       \n1                                              53.91       \n2                                              80.88       \n3                                              76.37       \n4                                             109.16       \n\n   McMeal at McDonalds (or Equivalent Combo Meal)  \\\n0                                           12.94   \n1                                            7.19   \n2                                           11.12   \n3                                            8.09   \n4                                           11.64   \n\n   One-way Ticket (Local Transport)  ...  (Izmir, Turkey,)  (Delhi, India,)  \\\n0                              3.88  ...               0.0              0.0   \n1                              1.19  ...               0.0              0.0   \n2                              3.64  ...               0.0              0.0   \n3                              2.47  ...               0.0              0.0   \n4                              3.42  ...               0.0              0.0   \n\n   (Bangalore, India,)  (Bogota, Colombia,)  (Pune, India,)  \\\n0                  0.0                  0.0             0.0   \n1                  0.0                  0.0             0.0   \n2                  0.0                  0.0             0.0   \n3                  0.0                  0.0             0.0   \n4                  0.0                  0.0             0.0   \n\n   (Ankara, Turkey,)  (Hyderabad, India,)  (Chennai, India,)  \\\n0                0.0                  0.0                0.0   \n1                0.0                  0.0                0.0   \n2                0.0                  0.0                0.0   \n3                0.0                  0.0                0.0   \n4                0.0                  0.0                0.0   \n\n   (Ahmedabad, India,)  (Kolkata, India,)  \n0                  0.0                1.0  \n1                  0.0                0.0  \n2                  0.0                0.0  \n3                  0.0                0.0  \n4                  0.0                0.0  \n\n[5 rows x 183 columns]"},"exec_count":47}},"pos":49,"start":1655479429930,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430031,"exec_count":48,"id":"a59f1f","input":"## Code that Ritum creation (Gets rid of tuple headers)\n\ncolumns = final_df.columns\ncolumns_fixed = []\n\nfor i in range(len(columns)):\n    if type(columns[i]) == str:\n        columns_fixed.append(columns[i])\n    else:\n        columns_fixed.append(columns[i][0])\n        \n# columns_fixed\n\nfinal_df = pd.DataFrame(final_df.values, columns = columns_fixed)\nfinal_df","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Cost of Living Index</th>\n      <th>Rent Index</th>\n      <th>Cost of Living Plus Rent Index</th>\n      <th>Groceries Index</th>\n      <th>Restaurant Price Index</th>\n      <th>Local Purchasing Power Index</th>\n      <th>Meal, Inexpensive Restaurant</th>\n      <th>Meal for 2 People, Mid-range Restaurant, Three-course</th>\n      <th>McMeal at McDonalds (or Equivalent Combo Meal)</th>\n      <th>One-way Ticket (Local Transport)</th>\n      <th>...</th>\n      <th>Izmir, Turkey</th>\n      <th>Delhi, India</th>\n      <th>Bangalore, India</th>\n      <th>Bogota, Colombia</th>\n      <th>Pune, India</th>\n      <th>Ankara, Turkey</th>\n      <th>Hyderabad, India</th>\n      <th>Chennai, India</th>\n      <th>Ahmedabad, India</th>\n      <th>Kolkata, India</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>131.24</td>\n      <td>69.26</td>\n      <td>102.19</td>\n      <td>136.14</td>\n      <td>132.52</td>\n      <td>129.79</td>\n      <td>23.12</td>\n      <td>92.46</td>\n      <td>12.94</td>\n      <td>3.88</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>120.47</td>\n      <td>27.76</td>\n      <td>77.01</td>\n      <td>141.33</td>\n      <td>116.95</td>\n      <td>15.40</td>\n      <td>8.98</td>\n      <td>53.91</td>\n      <td>7.19</td>\n      <td>1.19</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>102.33</td>\n      <td>46.39</td>\n      <td>76.11</td>\n      <td>97.62</td>\n      <td>111.54</td>\n      <td>85.18</td>\n      <td>18.70</td>\n      <td>80.88</td>\n      <td>11.12</td>\n      <td>3.64</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>17.97</td>\n      <td>76.37</td>\n      <td>8.09</td>\n      <td>2.47</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>97.61</td>\n      <td>46.27</td>\n      <td>73.55</td>\n      <td>91.92</td>\n      <td>105.77</td>\n      <td>74.84</td>\n      <td>17.96</td>\n      <td>109.16</td>\n      <td>11.64</td>\n      <td>3.42</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>151</th>\n      <td>27.17</td>\n      <td>6.31</td>\n      <td>17.39</td>\n      <td>21.43</td>\n      <td>17.97</td>\n      <td>39.07</td>\n      <td>3.82</td>\n      <td>15.28</td>\n      <td>3.51</td>\n      <td>0.46</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>152</th>\n      <td>26.61</td>\n      <td>6.47</td>\n      <td>17.17</td>\n      <td>29.69</td>\n      <td>18.17</td>\n      <td>51.21</td>\n      <td>1.90</td>\n      <td>8.86</td>\n      <td>3.80</td>\n      <td>0.25</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>153</th>\n      <td>26.08</td>\n      <td>6.76</td>\n      <td>17.02</td>\n      <td>28.88</td>\n      <td>16.98</td>\n      <td>46.31</td>\n      <td>1.52</td>\n      <td>7.59</td>\n      <td>3.35</td>\n      <td>0.25</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>26.01</td>\n      <td>5.93</td>\n      <td>16.59</td>\n      <td>28.52</td>\n      <td>19.15</td>\n      <td>39.11</td>\n      <td>1.90</td>\n      <td>8.86</td>\n      <td>3.16</td>\n      <td>0.25</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>155</th>\n      <td>25.99</td>\n      <td>5.57</td>\n      <td>16.42</td>\n      <td>28.24</td>\n      <td>18.89</td>\n      <td>44.66</td>\n      <td>2.53</td>\n      <td>10.76</td>\n      <td>3.79</td>\n      <td>0.13</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>156 rows × 183 columns</p>\n</div>","text/plain":"     Cost of Living Index  Rent Index  Cost of Living Plus Rent Index  \\\n0                  131.24       69.26                          102.19   \n1                  120.47       27.76                           77.01   \n2                  102.33       46.39                           76.11   \n3                  100.00      100.00                          100.00   \n4                   97.61       46.27                           73.55   \n..                    ...         ...                             ...   \n151                 27.17        6.31                           17.39   \n152                 26.61        6.47                           17.17   \n153                 26.08        6.76                           17.02   \n154                 26.01        5.93                           16.59   \n155                 25.99        5.57                           16.42   \n\n     Groceries Index  Restaurant Price Index  Local Purchasing Power Index  \\\n0             136.14                  132.52                        129.79   \n1             141.33                  116.95                         15.40   \n2              97.62                  111.54                         85.18   \n3             100.00                  100.00                        100.00   \n4              91.92                  105.77                         74.84   \n..               ...                     ...                           ...   \n151            21.43                   17.97                         39.07   \n152            29.69                   18.17                         51.21   \n153            28.88                   16.98                         46.31   \n154            28.52                   19.15                         39.11   \n155            28.24                   18.89                         44.66   \n\n     Meal, Inexpensive Restaurant  \\\n0                           23.12   \n1                            8.98   \n2                           18.70   \n3                           17.97   \n4                           17.96   \n..                            ...   \n151                          3.82   \n152                          1.90   \n153                          1.52   \n154                          1.90   \n155                          2.53   \n\n     Meal for 2 People, Mid-range Restaurant, Three-course  \\\n0                                                92.46       \n1                                                53.91       \n2                                                80.88       \n3                                                76.37       \n4                                               109.16       \n..                                                 ...       \n151                                              15.28       \n152                                               8.86       \n153                                               7.59       \n154                                               8.86       \n155                                              10.76       \n\n     McMeal at McDonalds (or Equivalent Combo Meal)  \\\n0                                             12.94   \n1                                              7.19   \n2                                             11.12   \n3                                              8.09   \n4                                             11.64   \n..                                              ...   \n151                                            3.51   \n152                                            3.80   \n153                                            3.35   \n154                                            3.16   \n155                                            3.79   \n\n     One-way Ticket (Local Transport)  ...  Izmir, Turkey  Delhi, India  \\\n0                                3.88  ...            0.0           0.0   \n1                                1.19  ...            0.0           0.0   \n2                                3.64  ...            0.0           0.0   \n3                                2.47  ...            0.0           0.0   \n4                                3.42  ...            0.0           0.0   \n..                                ...  ...            ...           ...   \n151                              0.46  ...            0.0           0.0   \n152                              0.25  ...            0.0           0.0   \n153                              0.25  ...            0.0           0.0   \n154                              0.25  ...            0.0           0.0   \n155                              0.13  ...            0.0           0.0   \n\n     Bangalore, India  Bogota, Colombia  Pune, India  Ankara, Turkey  \\\n0                 0.0               0.0          0.0             0.0   \n1                 0.0               0.0          0.0             0.0   \n2                 0.0               0.0          0.0             0.0   \n3                 0.0               0.0          0.0             0.0   \n4                 0.0               0.0          0.0             0.0   \n..                ...               ...          ...             ...   \n151               0.0               0.0          0.0             0.0   \n152               0.0               0.0          0.0             0.0   \n153               0.0               0.0          0.0             0.0   \n154               0.0               0.0          0.0             0.0   \n155               0.0               0.0          0.0             0.0   \n\n     Hyderabad, India  Chennai, India  Ahmedabad, India  Kolkata, India  \n0                 0.0             0.0               0.0             1.0  \n1                 0.0             0.0               0.0             0.0  \n2                 0.0             0.0               0.0             0.0  \n3                 0.0             0.0               0.0             0.0  \n4                 0.0             0.0               0.0             0.0  \n..                ...             ...               ...             ...  \n151               0.0             0.0               0.0             0.0  \n152               0.0             0.0               0.0             0.0  \n153               0.0             0.0               0.0             0.0  \n154               0.0             0.0               0.0             0.0  \n155               0.0             0.0               0.0             0.0  \n\n[156 rows x 183 columns]"},"exec_count":48}},"pos":50,"start":1655479429978,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430041,"exec_count":49,"id":"519a0b","input":"#The x and y variables for the following models\nx = final_df.drop('Cost of Living Index', axis= 'columns')\ny = final_df['Cost of Living Index']","kernel":"ds_env","no_halt":true,"pos":51,"start":1655479430036,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430053,"exec_count":50,"id":"0c09c7","input":"# import dataset\ndataset = pd.read_csv('./Project_Data/costofliving.csv') \n# alternatively open up .csv file to read data\ndataset = np.array(merged_costofliving)","kernel":"ds_env","no_halt":true,"pos":53,"start":1655479430045,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430071,"exec_count":51,"id":"9776e8","input":"print(dataset)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"[['Zurich, Switzerland' 131.24 69.26 ... 21449.95 2194.64 28414.08]\n ['Beirut, Lebanon' 120.47 27.76 ... 18766.59 348.27 4684.61]\n ['Oslo, Norway' 102.33 46.39 ... 31245.91 319.19 10981.56]\n ...\n ['Chennai, India' 26.08 6.76 ... 21604.75 51.12 1470.3]\n ['Ahmedabad, India' 26.01 5.93 ... 20809.53 51.34 1218.73]\n ['Kolkata, India' 25.99 5.57 ... 19667.56 37.06 1126.1]]\n"}},"pos":54,"start":1655479430068,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430083,"exec_count":52,"id":"37ce92","input":"# select all rows by : and column 1\n# by 1:2 representing features\nX = dataset[:, 1:2].astype(int) \n  \n# print X\nprint(X)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"[[131]\n [120]\n [102]\n [100]\n [ 97]\n [ 94]\n [ 93]\n [ 88]\n [ 88]\n [ 86]\n [ 85]\n [ 85]\n [ 85]\n [ 84]\n [ 83]\n [ 83]\n [ 80]\n [ 80]\n [ 80]\n [ 79]\n [ 79]\n [ 79]\n [ 79]\n [ 78]\n [ 78]\n [ 78]\n [ 77]\n [ 77]\n [ 77]\n [ 77]\n [ 76]\n [ 76]\n [ 76]\n [ 76]\n [ 76]\n [ 76]\n [ 75]\n [ 74]\n [ 74]\n [ 74]\n [ 73]\n [ 73]\n [ 72]\n [ 72]\n [ 72]\n [ 72]\n [ 71]\n [ 70]\n [ 70]\n [ 69]\n [ 68]\n [ 68]\n [ 68]\n [ 67]\n [ 66]\n [ 65]\n [ 64]\n [ 63]\n [ 62]\n [ 61]\n [ 59]\n [ 58]\n [ 58]\n [ 57]\n [ 57]\n [ 55]\n [ 54]\n [ 53]\n [ 52]\n [ 52]\n [ 52]\n [ 51]\n [ 51]\n [ 51]\n [ 50]\n [ 49]\n [ 49]\n [ 49]\n [ 49]\n [ 49]\n [ 47]\n [ 46]\n [ 46]\n [ 45]\n [ 44]\n [ 44]\n [ 44]\n [ 43]\n [ 42]\n [ 42]\n [ 41]\n [ 41]\n [ 41]\n [ 40]\n [ 40]\n [ 40]\n [ 40]\n [ 40]\n [ 40]\n [ 40]\n [ 40]\n [ 40]\n [ 39]\n [ 39]\n [ 39]\n [ 39]\n [ 38]\n [ 38]\n [ 38]\n [ 38]\n [ 37]\n [ 37]\n [ 37]\n [ 37]\n [ 37]\n [ 37]\n [ 37]\n [ 36]\n [ 36]\n [ 36]\n [ 36]\n [ 35]\n [ 35]\n [ 34]\n [ 34]\n [ 34]\n [ 34]\n [ 33]\n [ 33]\n [ 32]\n [ 32]\n [ 32]\n [ 31]\n [ 31]\n [ 31]\n [ 30]\n [ 30]\n [ 30]\n [ 30]\n [ 29]\n [ 29]\n [ 29]\n [ 29]\n [ 29]\n [ 29]\n [ 28]\n [ 28]\n [ 28]\n [ 28]\n [ 27]\n [ 27]\n [ 27]\n [ 26]\n [ 26]\n [ 26]\n [ 25]]\n"}},"pos":55,"start":1655479430082,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430093,"exec_count":53,"id":"304c4b","input":"# select all rows by : and column 2\n# by 2 to Y representing labels\ny = dataset[:, 2].astype(int) \n  \n# print y\nprint(y)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"[ 69  27  46 100  46  53 108  65  49  40  76  42  78  48  66  58  55  74\n  45  44  37  74  62  43  33  37  47  33  38  57  52  38  44  56  32  41\n  68  44  33  51  34  39  31  29  39  36  37  31  27  43  38  34  38  50\n  57  24  44  43  49  30  31  17  13  91  23  19  26  44  22  10  15  26\n  31  14  26  17  39  23  23  20  17  19  16  15  15  13  10  20  14  28\n  17  17  17  22  16  25  14  12  14  14  14  13  11  14   8  17  11  15\n   9   9  13  17   7  14  10  20  11  12  12  13  11  13  10  14   9  16\n  11  13  10  12   7   9  10   9   9  10  11   6  11   6   4  10  10  19\n   6   6   6   8   8  11   7   6   6   6   5   5]\n"}},"pos":56,"start":1655479430088,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430103,"exec_count":54,"id":"178acf","input":" # Splitting the dataset into train and test\nX_train_Dav, X_test_Dav, y_train_Dav, y_test_Dav = train_test_split( \nx, y, test_size = 0.2, random_state = 100)","kernel":"ds_env","no_halt":true,"pos":58,"start":1655479430098,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430143,"exec_count":55,"id":"8d9e47","input":"# import the regressor\nfrom sklearn.tree import DecisionTreeRegressor \n  \n# create a regressor object\nregressor = DecisionTreeRegressor(random_state = 0) \n  \n# fit the regressor with X and Y data\nregressor.fit(X_train_Dav, y_train_Dav)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(random_state=0)</pre></div></div></div></div></div>","text/plain":"DecisionTreeRegressor(random_state=0)"},"exec_count":55}},"pos":59,"start":1655479430107,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430165,"exec_count":56,"id":"53cabd","input":"# predicting a new value\n  \n# test the output by changing values\ny_pred = regressor.predict(X_test_Dav)\n  \n# print the predicted price\nprint(\"Predicted Costofliving: \", y_pred) ","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Predicted Costofliving:  [37. 43. 10. 55. 13. 17.  9. 31. 13. 33. 41. 14. 46. 56. 11. 22. 41. 27.\n 31. 11. 56. 44. 16.  6. 39.  4.  6. 33. 41. 33. 14. 13.]\n"}},"pos":60,"start":1655479430148,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430183,"exec_count":57,"id":"47bcfd","input":"regressor.score(X_train_Dav, y_train_Dav)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"1.0"},"exec_count":57}},"pos":61,"start":1655479430170,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430196,"exec_count":58,"id":"7ea276","input":"regressor.score(X_test_Dav, y_test_Dav)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.9814198867197563"},"exec_count":58}},"pos":62,"start":1655479430187,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430204,"exec_count":59,"id":"9a8672","input":"from sklearn.metrics import mean_squared_error","kernel":"ds_env","no_halt":true,"pos":63,"start":1655479430201,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430220,"exec_count":60,"id":"51a0ef","input":"mean_squared_error(y_test_Dav,y_pred )","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"4.71875"},"exec_count":60}},"pos":64,"start":1655479430212,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430238,"exec_count":61,"id":"bdc35a","input":"print (min(X), max(X))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"[25] [131]\n"}},"pos":65,"start":1655479430230,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430247,"exec_count":62,"id":"5de58d","input":"print(X)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"[[131]\n [120]\n [102]\n [100]\n [ 97]\n [ 94]\n [ 93]\n [ 88]\n [ 88]\n [ 86]\n [ 85]\n [ 85]\n [ 85]\n [ 84]\n [ 83]\n [ 83]\n [ 80]\n [ 80]\n [ 80]\n [ 79]\n [ 79]\n [ 79]\n [ 79]\n [ 78]\n [ 78]\n [ 78]\n [ 77]\n [ 77]\n [ 77]\n [ 77]\n [ 76]\n [ 76]\n [ 76]\n [ 76]\n [ 76]\n [ 76]\n [ 75]\n [ 74]\n [ 74]\n [ 74]\n [ 73]\n [ 73]\n [ 72]\n [ 72]\n [ 72]\n [ 72]\n [ 71]\n [ 70]\n [ 70]\n [ 69]\n [ 68]\n [ 68]\n [ 68]\n [ 67]\n [ 66]\n [ 65]\n [ 64]\n [ 63]\n [ 62]\n [ 61]\n [ 59]\n [ 58]\n [ 58]\n [ 57]\n [ 57]\n [ 55]\n [ 54]\n [ 53]\n [ 52]\n [ 52]\n [ 52]\n [ 51]\n [ 51]\n [ 51]\n [ 50]\n [ 49]\n [ 49]\n [ 49]\n [ 49]\n [ 49]\n [ 47]\n [ 46]\n [ 46]\n [ 45]\n [ 44]\n [ 44]\n [ 44]\n [ 43]\n [ 42]\n [ 42]\n [ 41]\n [ 41]\n [ 41]\n [ 40]\n [ 40]\n [ 40]\n [ 40]\n [ 40]\n [ 40]\n [ 40]\n [ 40]\n [ 40]\n [ 39]\n [ 39]\n [ 39]\n [ 39]\n [ 38]\n [ 38]\n [ 38]\n [ 38]\n [ 37]\n [ 37]\n [ 37]\n [ 37]\n [ 37]\n [ 37]\n [ 37]\n [ 36]\n [ 36]\n [ 36]\n [ 36]\n [ 35]\n [ 35]\n [ 34]\n [ 34]\n [ 34]\n [ 34]\n [ 33]\n [ 33]\n [ 32]\n [ 32]\n [ 32]\n [ 31]\n [ 31]\n [ 31]\n [ 30]\n [ 30]\n [ 30]\n [ 30]\n [ 29]\n [ 29]\n [ 29]\n [ 29]\n [ 29]\n [ 29]\n [ 28]\n [ 28]\n [ 28]\n [ 28]\n [ 27]\n [ 27]\n [ 27]\n [ 26]\n [ 26]\n [ 26]\n [ 25]]\n"}},"pos":66,"start":1655479430243,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430817,"exec_count":63,"id":"e53b67","input":"# arange for creating a range of values \n# from min value of X to max value of X \n# with a difference of 0.01 between two\n# consecutive values\nX_grid = np.arange(min(X), max(X), 0.01)\n\nprint(X_grid)\n  \n# reshape for reshaping the data into \n# a len(X_grid)*1 array, i.e. to make\n# a column out of the X_grid values\nX_grid = X_grid.reshape((1, len(X_grid))) \n  \n# scatter plot for original data\nplt.scatter(X, y, color = 'red')\n  \n# plot predicted data\nplt.plot(X_grid, regressor.predict(X_grid), color = 'blue') \n  \n# specify title\nplt.title('Cost of Living') \n  \n# specify X axis label\nplt.xlabel('x-placeholder')\n  \n# specify Y axis label\nplt.ylabel('Cost of Living')\n  \n# show the plot\nplt.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"[ 25.    25.01  25.02 ... 130.97 130.98 130.99]\n"},"1":{"name":"stderr","text":"/projects/d061bad1-2739-44d6-bf33-6fa5871e6830/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/base.py:450: UserWarning:\n\nX does not have valid feature names, but DecisionTreeRegressor was fitted with feature names\n\n"},"2":{"ename":"ValueError","evalue":"X has 10600 features, but DecisionTreeRegressor is expecting 182 features as input.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [63]\u001b[0m, in \u001b[0;36m<cell line: 18>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m plt\u001b[38;5;241m.\u001b[39mscatter(X, y, color \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mred\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     17\u001b[0m \u001b[38;5;66;03m# plot predicted data\u001b[39;00m\n\u001b[0;32m---> 18\u001b[0m plt\u001b[38;5;241m.\u001b[39mplot(X_grid, \u001b[43mregressor\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_grid\u001b[49m\u001b[43m)\u001b[49m, color \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mblue\u001b[39m\u001b[38;5;124m'\u001b[39m) \n\u001b[1;32m     20\u001b[0m \u001b[38;5;66;03m# specify title\u001b[39;00m\n\u001b[1;32m     21\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCost of Living\u001b[39m\u001b[38;5;124m'\u001b[39m) \n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_classes.py:505\u001b[0m, in \u001b[0;36mBaseDecisionTree.predict\u001b[0;34m(self, X, check_input)\u001b[0m\n\u001b[1;32m    482\u001b[0m \u001b[38;5;124;03m\"\"\"Predict class or regression value for X.\u001b[39;00m\n\u001b[1;32m    483\u001b[0m \n\u001b[1;32m    484\u001b[0m \u001b[38;5;124;03mFor a classification model, the predicted class for each sample in X is\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    502\u001b[0m \u001b[38;5;124;03m    The predicted classes, or the predict values.\u001b[39;00m\n\u001b[1;32m    503\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    504\u001b[0m check_is_fitted(\u001b[38;5;28mself\u001b[39m)\n\u001b[0;32m--> 505\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_X_predict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcheck_input\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    506\u001b[0m proba \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtree_\u001b[38;5;241m.\u001b[39mpredict(X)\n\u001b[1;32m    507\u001b[0m n_samples \u001b[38;5;241m=\u001b[39m X\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m]\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_classes.py:471\u001b[0m, in \u001b[0;36mBaseDecisionTree._validate_X_predict\u001b[0;34m(self, X, check_input)\u001b[0m\n\u001b[1;32m    469\u001b[0m \u001b[38;5;124;03m\"\"\"Validate the training data on predict (probabilities).\"\"\"\u001b[39;00m\n\u001b[1;32m    470\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m check_input:\n\u001b[0;32m--> 471\u001b[0m     X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mDTYPE\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcsr\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreset\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m    472\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m issparse(X) \u001b[38;5;129;01mand\u001b[39;00m (\n\u001b[1;32m    473\u001b[0m         X\u001b[38;5;241m.\u001b[39mindices\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m!=\u001b[39m np\u001b[38;5;241m.\u001b[39mintc \u001b[38;5;129;01mor\u001b[39;00m X\u001b[38;5;241m.\u001b[39mindptr\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m!=\u001b[39m np\u001b[38;5;241m.\u001b[39mintc\n\u001b[1;32m    474\u001b[0m     ):\n\u001b[1;32m    475\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo support for np.int64 index based sparse matrices\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/base.py:600\u001b[0m, in \u001b[0;36mBaseEstimator._validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    597\u001b[0m     out \u001b[38;5;241m=\u001b[39m X, y\n\u001b[1;32m    599\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m check_params\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mensure_2d\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m):\n\u001b[0;32m--> 600\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_check_n_features\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreset\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreset\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    602\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m out\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/base.py:400\u001b[0m, in \u001b[0;36mBaseEstimator._check_n_features\u001b[0;34m(self, X, reset)\u001b[0m\n\u001b[1;32m    397\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[1;32m    399\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m n_features \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_features_in_:\n\u001b[0;32m--> 400\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    401\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX has \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mn_features\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m features, but \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    402\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mis expecting \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_features_in_\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m features as input.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    403\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: X has 10600 features, but DecisionTreeRegressor is expecting 182 features as input."]},"3":{"data":{"image/png":"bc0bf6547b5bb6f3b2ca85f1c530a2047429eed9","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":67,"start":1655479430263,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430830,"exec_count":64,"id":"f6063d","input":"from sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report","kernel":"ds_env","no_halt":true,"pos":69,"start":1655479430826,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430840,"exec_count":65,"id":"78f349","input":"#reading data set\nx = final_df.drop('Cost of Living Index', axis= 'columns')\ny = final_df['Cost of Living Index']","kernel":"ds_env","no_halt":true,"pos":72,"start":1655479430835,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430897,"exec_count":66,"id":"58bbab","input":"x","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rent Index</th>\n      <th>Cost of Living Plus Rent Index</th>\n      <th>Groceries Index</th>\n      <th>Restaurant Price Index</th>\n      <th>Local Purchasing Power Index</th>\n      <th>Meal, Inexpensive Restaurant</th>\n      <th>Meal for 2 People, Mid-range Restaurant, Three-course</th>\n      <th>McMeal at McDonalds (or Equivalent Combo Meal)</th>\n      <th>One-way Ticket (Local Transport)</th>\n      <th>Monthly Pass (Regular Price)</th>\n      <th>...</th>\n      <th>Izmir, Turkey</th>\n      <th>Delhi, India</th>\n      <th>Bangalore, India</th>\n      <th>Bogota, Colombia</th>\n      <th>Pune, India</th>\n      <th>Ankara, Turkey</th>\n      <th>Hyderabad, India</th>\n      <th>Chennai, India</th>\n      <th>Ahmedabad, India</th>\n      <th>Kolkata, India</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>69.26</td>\n      <td>102.19</td>\n      <td>136.14</td>\n      <td>132.52</td>\n      <td>129.79</td>\n      <td>23.12</td>\n      <td>92.46</td>\n      <td>12.94</td>\n      <td>3.88</td>\n      <td>78.59</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>27.76</td>\n      <td>77.01</td>\n      <td>141.33</td>\n      <td>116.95</td>\n      <td>15.40</td>\n      <td>8.98</td>\n      <td>53.91</td>\n      <td>7.19</td>\n      <td>1.19</td>\n      <td>53.91</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>46.39</td>\n      <td>76.11</td>\n      <td>97.62</td>\n      <td>111.54</td>\n      <td>85.18</td>\n      <td>18.70</td>\n      <td>80.88</td>\n      <td>11.12</td>\n      <td>3.64</td>\n      <td>75.83</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>100.00</td>\n      <td>17.97</td>\n      <td>76.37</td>\n      <td>8.09</td>\n      <td>2.47</td>\n      <td>114.11</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>46.27</td>\n      <td>73.55</td>\n      <td>91.92</td>\n      <td>105.77</td>\n      <td>74.84</td>\n      <td>17.96</td>\n      <td>109.16</td>\n      <td>11.64</td>\n      <td>3.42</td>\n      <td>93.15</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>151</th>\n      <td>6.31</td>\n      <td>17.39</td>\n      <td>21.43</td>\n      <td>17.97</td>\n      <td>39.07</td>\n      <td>3.82</td>\n      <td>15.28</td>\n      <td>3.51</td>\n      <td>0.46</td>\n      <td>22.92</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>152</th>\n      <td>6.47</td>\n      <td>17.17</td>\n      <td>29.69</td>\n      <td>18.17</td>\n      <td>51.21</td>\n      <td>1.90</td>\n      <td>8.86</td>\n      <td>3.80</td>\n      <td>0.25</td>\n      <td>12.02</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>153</th>\n      <td>6.76</td>\n      <td>17.02</td>\n      <td>28.88</td>\n      <td>16.98</td>\n      <td>46.31</td>\n      <td>1.52</td>\n      <td>7.59</td>\n      <td>3.35</td>\n      <td>0.25</td>\n      <td>12.66</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>5.93</td>\n      <td>16.59</td>\n      <td>28.52</td>\n      <td>19.15</td>\n      <td>39.11</td>\n      <td>1.90</td>\n      <td>8.86</td>\n      <td>3.16</td>\n      <td>0.25</td>\n      <td>5.06</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>155</th>\n      <td>5.57</td>\n      <td>16.42</td>\n      <td>28.24</td>\n      <td>18.89</td>\n      <td>44.66</td>\n      <td>2.53</td>\n      <td>10.76</td>\n      <td>3.79</td>\n      <td>0.13</td>\n      <td>3.16</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>156 rows × 182 columns</p>\n</div>","text/plain":"     Rent Index  Cost of Living Plus Rent Index  Groceries Index  \\\n0         69.26                          102.19           136.14   \n1         27.76                           77.01           141.33   \n2         46.39                           76.11            97.62   \n3        100.00                          100.00           100.00   \n4         46.27                           73.55            91.92   \n..          ...                             ...              ...   \n151        6.31                           17.39            21.43   \n152        6.47                           17.17            29.69   \n153        6.76                           17.02            28.88   \n154        5.93                           16.59            28.52   \n155        5.57                           16.42            28.24   \n\n     Restaurant Price Index  Local Purchasing Power Index  \\\n0                    132.52                        129.79   \n1                    116.95                         15.40   \n2                    111.54                         85.18   \n3                    100.00                        100.00   \n4                    105.77                         74.84   \n..                      ...                           ...   \n151                   17.97                         39.07   \n152                   18.17                         51.21   \n153                   16.98                         46.31   \n154                   19.15                         39.11   \n155                   18.89                         44.66   \n\n     Meal, Inexpensive Restaurant  \\\n0                           23.12   \n1                            8.98   \n2                           18.70   \n3                           17.97   \n4                           17.96   \n..                            ...   \n151                          3.82   \n152                          1.90   \n153                          1.52   \n154                          1.90   \n155                          2.53   \n\n     Meal for 2 People, Mid-range Restaurant, Three-course  \\\n0                                                92.46       \n1                                                53.91       \n2                                                80.88       \n3                                                76.37       \n4                                               109.16       \n..                                                 ...       \n151                                              15.28       \n152                                               8.86       \n153                                               7.59       \n154                                               8.86       \n155                                              10.76       \n\n     McMeal at McDonalds (or Equivalent Combo Meal)  \\\n0                                             12.94   \n1                                              7.19   \n2                                             11.12   \n3                                              8.09   \n4                                             11.64   \n..                                              ...   \n151                                            3.51   \n152                                            3.80   \n153                                            3.35   \n154                                            3.16   \n155                                            3.79   \n\n     One-way Ticket (Local Transport)  Monthly Pass (Regular Price)  ...  \\\n0                                3.88                         78.59  ...   \n1                                1.19                         53.91  ...   \n2                                3.64                         75.83  ...   \n3                                2.47                        114.11  ...   \n4                                3.42                         93.15  ...   \n..                                ...                           ...  ...   \n151                              0.46                         22.92  ...   \n152                              0.25                         12.02  ...   \n153                              0.25                         12.66  ...   \n154                              0.25                          5.06  ...   \n155                              0.13                          3.16  ...   \n\n     Izmir, Turkey  Delhi, India  Bangalore, India  Bogota, Colombia  \\\n0              0.0           0.0               0.0               0.0   \n1              0.0           0.0               0.0               0.0   \n2              0.0           0.0               0.0               0.0   \n3              0.0           0.0               0.0               0.0   \n4              0.0           0.0               0.0               0.0   \n..             ...           ...               ...               ...   \n151            0.0           0.0               0.0               0.0   \n152            0.0           0.0               0.0               0.0   \n153            0.0           0.0               0.0               0.0   \n154            0.0           0.0               0.0               0.0   \n155            0.0           0.0               0.0               0.0   \n\n     Pune, India  Ankara, Turkey  Hyderabad, India  Chennai, India  \\\n0            0.0             0.0               0.0             0.0   \n1            0.0             0.0               0.0             0.0   \n2            0.0             0.0               0.0             0.0   \n3            0.0             0.0               0.0             0.0   \n4            0.0             0.0               0.0             0.0   \n..           ...             ...               ...             ...   \n151          0.0             0.0               0.0             0.0   \n152          0.0             0.0               0.0             0.0   \n153          0.0             0.0               0.0             0.0   \n154          0.0             0.0               0.0             0.0   \n155          0.0             0.0               0.0             0.0   \n\n     Ahmedabad, India  Kolkata, India  \n0                 0.0             1.0  \n1                 0.0             0.0  \n2                 0.0             0.0  \n3                 0.0             0.0  \n4                 0.0             0.0  \n..                ...             ...  \n151               0.0             0.0  \n152               0.0             0.0  \n153               0.0             0.0  \n154               0.0             0.0  \n155               0.0             0.0  \n\n[156 rows x 182 columns]"},"exec_count":66}},"pos":73,"start":1655479430847,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430910,"exec_count":67,"id":"674b66","input":"y","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0      131.24\n1      120.47\n2      102.33\n3      100.00\n4       97.61\n        ...  \n151     27.17\n152     26.61\n153     26.08\n154     26.01\n155     25.99\nName: Cost of Living Index, Length: 156, dtype: float64"},"exec_count":67}},"pos":74,"start":1655479430902,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430926,"exec_count":68,"id":"20ca57","input":"#feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_x = StandardScaler()\nscaled_x = sc_x.fit_transform(x)","kernel":"ds_env","no_halt":true,"pos":75,"start":1655479430914,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430935,"exec_count":69,"id":"082e67","input":"x = pd.DataFrame(scaled_x, columns= x.columns)","kernel":"ds_env","no_halt":true,"pos":76,"start":1655479430930,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430979,"exec_count":70,"id":"187314","input":"x","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rent Index</th>\n      <th>Cost of Living Plus Rent Index</th>\n      <th>Groceries Index</th>\n      <th>Restaurant Price Index</th>\n      <th>Local Purchasing Power Index</th>\n      <th>Meal, Inexpensive Restaurant</th>\n      <th>Meal for 2 People, Mid-range Restaurant, Three-course</th>\n      <th>McMeal at McDonalds (or Equivalent Combo Meal)</th>\n      <th>One-way Ticket (Local Transport)</th>\n      <th>Monthly Pass (Regular Price)</th>\n      <th>...</th>\n      <th>Izmir, Turkey</th>\n      <th>Delhi, India</th>\n      <th>Bangalore, India</th>\n      <th>Bogota, Colombia</th>\n      <th>Pune, India</th>\n      <th>Ankara, Turkey</th>\n      <th>Hyderabad, India</th>\n      <th>Chennai, India</th>\n      <th>Ahmedabad, India</th>\n      <th>Kolkata, India</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.988789</td>\n      <td>2.939186</td>\n      <td>3.788437</td>\n      <td>3.214150</td>\n      <td>1.917806</td>\n      <td>3.357815</td>\n      <td>2.987559</td>\n      <td>3.580709</td>\n      <td>2.601992</td>\n      <td>1.164445</td>\n      <td>...</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>12.449900</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-0.017366</td>\n      <td>1.704198</td>\n      <td>4.017610</td>\n      <td>2.600580</td>\n      <td>-1.504892</td>\n      <td>0.208584</td>\n      <td>0.939310</td>\n      <td>0.740560</td>\n      <td>-0.071023</td>\n      <td>0.374606</td>\n      <td>...</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.883228</td>\n      <td>1.660057</td>\n      <td>2.087522</td>\n      <td>2.387388</td>\n      <td>0.583017</td>\n      <td>2.373402</td>\n      <td>2.372288</td>\n      <td>2.681740</td>\n      <td>2.363508</td>\n      <td>1.076116</td>\n      <td>...</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3.474793</td>\n      <td>2.831775</td>\n      <td>2.192614</td>\n      <td>1.932629</td>\n      <td>1.026450</td>\n      <td>2.210818</td>\n      <td>2.132661</td>\n      <td>1.185105</td>\n      <td>1.200895</td>\n      <td>2.301200</td>\n      <td>...</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.877427</td>\n      <td>1.534498</td>\n      <td>1.835828</td>\n      <td>2.160008</td>\n      <td>0.273630</td>\n      <td>2.208591</td>\n      <td>3.874868</td>\n      <td>2.938588</td>\n      <td>2.144897</td>\n      <td>1.630412</td>\n      <td>...</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>151</th>\n      <td>-1.054281</td>\n      <td>-1.219947</td>\n      <td>-1.276776</td>\n      <td>-1.299942</td>\n      <td>-0.796655</td>\n      <td>-0.940641</td>\n      <td>-1.113189</td>\n      <td>-1.077135</td>\n      <td>-0.796414</td>\n      <td>-0.617174</td>\n      <td>...</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n    </tr>\n    <tr>\n      <th>152</th>\n      <td>-1.046547</td>\n      <td>-1.230737</td>\n      <td>-0.912042</td>\n      <td>-1.292060</td>\n      <td>-0.433410</td>\n      <td>-1.368259</td>\n      <td>-1.454298</td>\n      <td>-0.933893</td>\n      <td>-1.005088</td>\n      <td>-0.966009</td>\n      <td>...</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n    </tr>\n    <tr>\n      <th>153</th>\n      <td>-1.032528</td>\n      <td>-1.238094</td>\n      <td>-0.947809</td>\n      <td>-1.338955</td>\n      <td>-0.580025</td>\n      <td>-1.452892</td>\n      <td>-1.521776</td>\n      <td>-1.156165</td>\n      <td>-1.005088</td>\n      <td>-0.945527</td>\n      <td>...</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>-1.072651</td>\n      <td>-1.259184</td>\n      <td>-0.963706</td>\n      <td>-1.253441</td>\n      <td>-0.795458</td>\n      <td>-1.368259</td>\n      <td>-1.454298</td>\n      <td>-1.250014</td>\n      <td>-1.005088</td>\n      <td>-1.188751</td>\n      <td>...</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n    </tr>\n    <tr>\n      <th>155</th>\n      <td>-1.090054</td>\n      <td>-1.267522</td>\n      <td>-0.976069</td>\n      <td>-1.263687</td>\n      <td>-0.629395</td>\n      <td>-1.227947</td>\n      <td>-1.353347</td>\n      <td>-0.938832</td>\n      <td>-1.124330</td>\n      <td>-1.249558</td>\n      <td>...</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n      <td>-0.080322</td>\n    </tr>\n  </tbody>\n</table>\n<p>156 rows × 182 columns</p>\n</div>","text/plain":"     Rent Index  Cost of Living Plus Rent Index  Groceries Index  \\\n0      1.988789                        2.939186         3.788437   \n1     -0.017366                        1.704198         4.017610   \n2      0.883228                        1.660057         2.087522   \n3      3.474793                        2.831775         2.192614   \n4      0.877427                        1.534498         1.835828   \n..          ...                             ...              ...   \n151   -1.054281                       -1.219947        -1.276776   \n152   -1.046547                       -1.230737        -0.912042   \n153   -1.032528                       -1.238094        -0.947809   \n154   -1.072651                       -1.259184        -0.963706   \n155   -1.090054                       -1.267522        -0.976069   \n\n     Restaurant Price Index  Local Purchasing Power Index  \\\n0                  3.214150                      1.917806   \n1                  2.600580                     -1.504892   \n2                  2.387388                      0.583017   \n3                  1.932629                      1.026450   \n4                  2.160008                      0.273630   \n..                      ...                           ...   \n151               -1.299942                     -0.796655   \n152               -1.292060                     -0.433410   \n153               -1.338955                     -0.580025   \n154               -1.253441                     -0.795458   \n155               -1.263687                     -0.629395   \n\n     Meal, Inexpensive Restaurant  \\\n0                        3.357815   \n1                        0.208584   \n2                        2.373402   \n3                        2.210818   \n4                        2.208591   \n..                            ...   \n151                     -0.940641   \n152                     -1.368259   \n153                     -1.452892   \n154                     -1.368259   \n155                     -1.227947   \n\n     Meal for 2 People, Mid-range Restaurant, Three-course  \\\n0                                             2.987559       \n1                                             0.939310       \n2                                             2.372288       \n3                                             2.132661       \n4                                             3.874868       \n..                                                 ...       \n151                                          -1.113189       \n152                                          -1.454298       \n153                                          -1.521776       \n154                                          -1.454298       \n155                                          -1.353347       \n\n     McMeal at McDonalds (or Equivalent Combo Meal)  \\\n0                                          3.580709   \n1                                          0.740560   \n2                                          2.681740   \n3                                          1.185105   \n4                                          2.938588   \n..                                              ...   \n151                                       -1.077135   \n152                                       -0.933893   \n153                                       -1.156165   \n154                                       -1.250014   \n155                                       -0.938832   \n\n     One-way Ticket (Local Transport)  Monthly Pass (Regular Price)  ...  \\\n0                            2.601992                      1.164445  ...   \n1                           -0.071023                      0.374606  ...   \n2                            2.363508                      1.076116  ...   \n3                            1.200895                      2.301200  ...   \n4                            2.144897                      1.630412  ...   \n..                                ...                           ...  ...   \n151                         -0.796414                     -0.617174  ...   \n152                         -1.005088                     -0.966009  ...   \n153                         -1.005088                     -0.945527  ...   \n154                         -1.005088                     -1.188751  ...   \n155                         -1.124330                     -1.249558  ...   \n\n     Izmir, Turkey  Delhi, India  Bangalore, India  Bogota, Colombia  \\\n0        -0.080322     -0.080322         -0.080322         -0.080322   \n1        -0.080322     -0.080322         -0.080322         -0.080322   \n2        -0.080322     -0.080322         -0.080322         -0.080322   \n3        -0.080322     -0.080322         -0.080322         -0.080322   \n4        -0.080322     -0.080322         -0.080322         -0.080322   \n..             ...           ...               ...               ...   \n151      -0.080322     -0.080322         -0.080322         -0.080322   \n152      -0.080322     -0.080322         -0.080322         -0.080322   \n153      -0.080322     -0.080322         -0.080322         -0.080322   \n154      -0.080322     -0.080322         -0.080322         -0.080322   \n155      -0.080322     -0.080322         -0.080322         -0.080322   \n\n     Pune, India  Ankara, Turkey  Hyderabad, India  Chennai, India  \\\n0      -0.080322       -0.080322         -0.080322       -0.080322   \n1      -0.080322       -0.080322         -0.080322       -0.080322   \n2      -0.080322       -0.080322         -0.080322       -0.080322   \n3      -0.080322       -0.080322         -0.080322       -0.080322   \n4      -0.080322       -0.080322         -0.080322       -0.080322   \n..           ...             ...               ...             ...   \n151    -0.080322       -0.080322         -0.080322       -0.080322   \n152    -0.080322       -0.080322         -0.080322       -0.080322   \n153    -0.080322       -0.080322         -0.080322       -0.080322   \n154    -0.080322       -0.080322         -0.080322       -0.080322   \n155    -0.080322       -0.080322         -0.080322       -0.080322   \n\n     Ahmedabad, India  Kolkata, India  \n0           -0.080322       12.449900  \n1           -0.080322       -0.080322  \n2           -0.080322       -0.080322  \n3           -0.080322       -0.080322  \n4           -0.080322       -0.080322  \n..                ...             ...  \n151         -0.080322       -0.080322  \n152         -0.080322       -0.080322  \n153         -0.080322       -0.080322  \n154         -0.080322       -0.080322  \n155         -0.080322       -0.080322  \n\n[156 rows x 182 columns]"},"exec_count":70}},"pos":77,"scrolled":true,"start":1655479430960,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430989,"exec_count":71,"id":"a0995c","input":"#training (split data 80/20)\nfrom sklearn.model_selection import train_test_split\nx_train_Kath, x_test_Kath, y_train_Kath, y_test_Kath = train_test_split(x, y, test_size = 0.2)","kernel":"ds_env","no_halt":true,"pos":79,"start":1655479430984,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479430999,"exec_count":72,"id":"76966a","input":"print(x_train_Kath.shape)\nprint(x_test_Kath.shape)\nprint(y_train_Kath.shape)\nprint(y_test_Kath.shape)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"(124, 182)\n(32, 182)\n(124,)\n(32,)\n"}},"pos":80,"start":1655479430993,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479431017,"exec_count":73,"id":"385039","input":"#fitting data\nfrom sklearn.svm import SVR\nregressor = SVR(kernel = 'rbf')\nregressor.fit(x_train_Kath, y_train_Kath)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVR()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVR</label><div class=\"sk-toggleable__content\"><pre>SVR()</pre></div></div></div></div></div>","text/plain":"SVR()"},"exec_count":73}},"pos":81,"start":1655479431004,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479431048,"exec_count":74,"id":"0f1708","input":"#training\nfrom sklearn.svm import SVR\nregressor = SVR(kernel = 'rbf', C=5)\nregressor.fit(x_train_Kath, y_train_Kath)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVR(C=5)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVR</label><div class=\"sk-toggleable__content\"><pre>SVR(C=5)</pre></div></div></div></div></div>","text/plain":"SVR(C=5)"},"exec_count":74}},"pos":82,"start":1655479431028,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479431064,"exec_count":75,"id":"6c4029","input":"#predict\ny_pred = regressor.predict(x_test_Kath)\ny_pred\n# y_pred = y.inverse_transform(y_pred)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"array([44.31900071, 56.71319875, 64.72195428, 63.6502684 , 56.94615774,\n       61.24412687, 60.52159965, 55.93142038, 58.24649385, 58.25256197,\n       58.08556253, 42.35441224, 43.85806231, 44.82633655, 62.85340762,\n       65.8690452 , 53.91523862, 60.4155653 , 60.65722375, 45.58158115,\n       42.65371047, 40.05834392, 58.96718937, 62.29644439, 38.00029648,\n       38.87130434, 62.34207823, 63.0584408 , 59.60661911, 58.82839238,\n       66.82661823, 43.40379871])"},"exec_count":75}},"pos":83,"start":1655479431053,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479431089,"exec_count":76,"id":"091981","input":"regressor.score(x_train_Kath, y_train_Kath)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.7286812236074651"},"exec_count":76}},"pos":84,"start":1655479431069,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479431113,"exec_count":77,"id":"b1945e","input":"#Accuracy Scores\nregressor.score(x_test_Kath, y_test_Kath)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.37474601335448854"},"exec_count":77}},"pos":85,"start":1655479431096,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479431129,"exec_count":78,"id":"1db5b8","input":"mean_squared_error(y_test_Kath,y_pred )","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"206.97373080869176"},"exec_count":78}},"pos":86,"start":1655479431118,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479431154,"exec_count":79,"id":"3c654c","input":"from sklearn.ensemble import RandomForestRegressor","kernel":"ds_env","no_halt":true,"pos":88,"start":1655479431142,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479431164,"exec_count":80,"id":"064724","input":"x= final_df.drop('Cost of Living Index', axis = 'columns')\ny= final_df['Cost of Living Index']","kernel":"ds_env","no_halt":true,"pos":89,"start":1655479431157,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479432261,"exec_count":81,"id":"83e433","input":"from sklearn.model_selection import train_test_split\n\nx_train_sm, x_test_sm, y_train_sm, y_test_sm = train_test_split(\nx, y, test_size=0.2, random_state=123)\n\nprint ('Train group shape:', x_train_sm.shape)\nprint ('Test group shape:', x_test_sm.shape)\n\nx_train_sm['Train_or_test'] = 1\nx_test_sm['Train_or_test'] = 0 \n\nrandom_forest = RandomForestRegressor(n_estimators=500, random_state=123)\nrandom_forest.fit(x_train_sm, y_train_sm)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Train group shape: (124, 182)\nTest group shape: (32, 182)\n"},"1":{"data":{"text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(n_estimators=500, random_state=123)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(n_estimators=500, random_state=123)</pre></div></div></div></div></div>","text/plain":"RandomForestRegressor(n_estimators=500, random_state=123)"},"exec_count":81}},"pos":91,"start":1655479431172,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479432332,"exec_count":82,"id":"ea1688","input":"random_forest.score(x_train_sm, y_train_sm)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.9920101845259802"},"exec_count":82}},"pos":92,"start":1655479432272,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479432403,"exec_count":83,"id":"759dfb","input":"random_forest.score(x_test_sm, y_test_sm)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.964555756899568"},"exec_count":83}},"pos":93,"start":1655479432336,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479432465,"exec_count":84,"id":"d86943","input":"mean_squared_error(y_test_sm, random_forest.predict(x_test_sm))","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"15.700726826712621"},"exec_count":84}},"pos":94,"start":1655479432411,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479432782,"exec_count":85,"id":"8cc6a4","input":"regressor = RandomForestRegressor(n_estimators = 100, random_state = 0)\nregressor.fit(x, y) ","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=0)</pre></div></div></div></div></div>","text/plain":"RandomForestRegressor(random_state=0)"},"exec_count":85}},"pos":95,"start":1655479432470,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479433010,"exec_count":86,"id":"e4a03c","input":"Y_pred = regressor.predict(np.array([6.5]).reshape(1, 1))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stderr","text":"/projects/d061bad1-2739-44d6-bf33-6fa5871e6830/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/base.py:450: UserWarning:\n\nX does not have valid feature names, but RandomForestRegressor was fitted with feature names\n\n"},"1":{"ename":"ValueError","evalue":"X has 1 features, but RandomForestRegressor is expecting 182 features as input.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [86]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m Y_pred \u001b[38;5;241m=\u001b[39m \u001b[43mregressor\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43marray\u001b[49m\u001b[43m(\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m6.5\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mreshape\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/ensemble/_forest.py:991\u001b[0m, in \u001b[0;36mForestRegressor.predict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    989\u001b[0m check_is_fitted(\u001b[38;5;28mself\u001b[39m)\n\u001b[1;32m    990\u001b[0m \u001b[38;5;66;03m# Check data\u001b[39;00m\n\u001b[0;32m--> 991\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_X_predict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    993\u001b[0m \u001b[38;5;66;03m# Assign chunk of trees to jobs\u001b[39;00m\n\u001b[1;32m    994\u001b[0m n_jobs, _, _ \u001b[38;5;241m=\u001b[39m _partition_estimators(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_estimators, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_jobs)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/ensemble/_forest.py:605\u001b[0m, in \u001b[0;36mBaseForest._validate_X_predict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    602\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    603\u001b[0m \u001b[38;5;124;03mValidate X whenever one tries to predict, apply, predict_proba.\"\"\"\u001b[39;00m\n\u001b[1;32m    604\u001b[0m check_is_fitted(\u001b[38;5;28mself\u001b[39m)\n\u001b[0;32m--> 605\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mDTYPE\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcsr\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreset\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m    606\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m issparse(X) \u001b[38;5;129;01mand\u001b[39;00m (X\u001b[38;5;241m.\u001b[39mindices\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m!=\u001b[39m np\u001b[38;5;241m.\u001b[39mintc \u001b[38;5;129;01mor\u001b[39;00m X\u001b[38;5;241m.\u001b[39mindptr\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m!=\u001b[39m np\u001b[38;5;241m.\u001b[39mintc):\n\u001b[1;32m    607\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo support for np.int64 index based sparse matrices\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/base.py:600\u001b[0m, in \u001b[0;36mBaseEstimator._validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    597\u001b[0m     out \u001b[38;5;241m=\u001b[39m X, y\n\u001b[1;32m    599\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m check_params\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mensure_2d\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m):\n\u001b[0;32m--> 600\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_check_n_features\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreset\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreset\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    602\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m out\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/base.py:400\u001b[0m, in \u001b[0;36mBaseEstimator._check_n_features\u001b[0;34m(self, X, reset)\u001b[0m\n\u001b[1;32m    397\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[1;32m    399\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m n_features \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_features_in_:\n\u001b[0;32m--> 400\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    401\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX has \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mn_features\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m features, but \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    402\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mis expecting \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_features_in_\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m features as input.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    403\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: X has 1 features, but RandomForestRegressor is expecting 182 features as input."]}},"pos":96,"start":1655479432809,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479433034,"exec_count":87,"id":"34fd47","input":"cross_val_score()","kernel":"ds_env","no_halt":true,"output":{"0":{"ename":"NameError","evalue":"name 'cross_val_score' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [87]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mcross_val_score\u001b[49m()\n","\u001b[0;31mNameError\u001b[0m: name 'cross_val_score' is not defined"]}},"pos":98,"start":1655479433016,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479433062,"exec_count":88,"id":"33e732","input":"#Amir (Lasso)\ndf = pd.read_csv(\"./Project_Data/costofliving.csv\")\ndf.head()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rank</th>\n      <th>City</th>\n      <th>Cost of Living Index</th>\n      <th>Rent Index</th>\n      <th>Cost of Living Plus Rent Index</th>\n      <th>Groceries Index</th>\n      <th>Restaurant Price Index</th>\n      <th>Local Purchasing Power Index</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NaN</td>\n      <td>Hamilton, Bermuda</td>\n      <td>149.02</td>\n      <td>96.10</td>\n      <td>124.22</td>\n      <td>157.89</td>\n      <td>155.22</td>\n      <td>79.43</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>Zurich, Switzerland</td>\n      <td>131.24</td>\n      <td>69.26</td>\n      <td>102.19</td>\n      <td>136.14</td>\n      <td>132.52</td>\n      <td>129.79</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>Basel, Switzerland</td>\n      <td>130.93</td>\n      <td>49.38</td>\n      <td>92.70</td>\n      <td>137.07</td>\n      <td>130.95</td>\n      <td>111.53</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>Zug, Switzerland</td>\n      <td>128.13</td>\n      <td>72.12</td>\n      <td>101.87</td>\n      <td>132.61</td>\n      <td>130.93</td>\n      <td>143.40</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>Lugano, Switzerland</td>\n      <td>123.99</td>\n      <td>44.99</td>\n      <td>86.96</td>\n      <td>129.17</td>\n      <td>119.80</td>\n      <td>111.96</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Rank                 City  Cost of Living Index  Rent Index  \\\n0   NaN    Hamilton, Bermuda                149.02       96.10   \n1   NaN  Zurich, Switzerland                131.24       69.26   \n2   NaN   Basel, Switzerland                130.93       49.38   \n3   NaN     Zug, Switzerland                128.13       72.12   \n4   NaN  Lugano, Switzerland                123.99       44.99   \n\n   Cost of Living Plus Rent Index  Groceries Index  Restaurant Price Index  \\\n0                          124.22           157.89                  155.22   \n1                          102.19           136.14                  132.52   \n2                           92.70           137.07                  130.95   \n3                          101.87           132.61                  130.93   \n4                           86.96           129.17                  119.80   \n\n   Local Purchasing Power Index  \n0                         79.43  \n1                        129.79  \n2                        111.53  \n3                        143.40  \n4                        111.96  "},"exec_count":88}},"pos":100,"start":1655479433037,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479433096,"exec_count":89,"id":"b46752","input":"cols_selected = ['Rent Index', 'Cost of Living Plus Rent Index', 'Groceries Index', 'Restaurant Price Index', 'Cost of Living Index']\ndf[cols_selected].head()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rent Index</th>\n      <th>Cost of Living Plus Rent Index</th>\n      <th>Groceries Index</th>\n      <th>Restaurant Price Index</th>\n      <th>Cost of Living Index</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>96.10</td>\n      <td>124.22</td>\n      <td>157.89</td>\n      <td>155.22</td>\n      <td>149.02</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>69.26</td>\n      <td>102.19</td>\n      <td>136.14</td>\n      <td>132.52</td>\n      <td>131.24</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>49.38</td>\n      <td>92.70</td>\n      <td>137.07</td>\n      <td>130.95</td>\n      <td>130.93</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>72.12</td>\n      <td>101.87</td>\n      <td>132.61</td>\n      <td>130.93</td>\n      <td>128.13</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>44.99</td>\n      <td>86.96</td>\n      <td>129.17</td>\n      <td>119.80</td>\n      <td>123.99</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Rent Index  Cost of Living Plus Rent Index  Groceries Index  \\\n0       96.10                          124.22           157.89   \n1       69.26                          102.19           136.14   \n2       49.38                           92.70           137.07   \n3       72.12                          101.87           132.61   \n4       44.99                           86.96           129.17   \n\n   Restaurant Price Index  Cost of Living Index  \n0                  155.22                149.02  \n1                  132.52                131.24  \n2                  130.95                130.93  \n3                  130.93                128.13  \n4                  119.80                123.99  "},"exec_count":89}},"pos":101,"start":1655479433093,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479433109,"exec_count":90,"id":"d6f393","input":"x = df[cols_selected].iloc[:,0:4].values\ny = df[cols_selected]['Cost of Living Index'].values","kernel":"ds_env","no_halt":true,"pos":102,"start":1655479433101,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479433118,"exec_count":91,"id":"84953d","input":"x_train_ar, x_test_ar, y_train_ar, y_test_ar = train_test_split( x, y, \n                                      test_size=0.2, random_state=0)","kernel":"ds_env","no_halt":true,"pos":104,"start":1655479433113,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479433139,"exec_count":92,"id":"246774","input":"x_train_ar","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[23.04, 37.06, 41.99, 44.73],\n       [17.92, 39.73, 46.99, 60.78],\n       [35.29, 56.6 , 76.36, 79.48],\n       ...,\n       [20.61, 35.78, 38.93, 40.06],\n       [32.29, 52.4 , 74.76, 58.11],\n       [ 5.93, 15.37, 18.09, 16.7 ]])"},"exec_count":92}},"pos":105,"start":1655479433122,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479433654,"exec_count":93,"id":"1a06d1","input":"sc_y = StandardScaler()\nsc_x = StandardScaler()\ny_std = sc_y.fit_transform(y_train_ar.reshape(1,-1))\nx_train_std = sc_x.fit_transform(x_train_ar)\nx_test_std = sc_x.transform(x_test_ar)\ny_train_std = sc_y.fit_transform(y_train_ar)","kernel":"ds_env","no_halt":true,"output":{"0":{"ename":"ValueError","evalue":"Expected 2D array, got 1D array instead:\narray=[ 49.44  58.97  75.41  72.38  65.18  31.81  37.53  70.28  77.52  63.73\n  75.68  49.21  75.31  27.57  20.79  67.71  46.94  38.74  88.77  64.54\n  49.37  42.7   67.04  73.56  57.26  18.55  52.97  64.53  58.4   40.83\n  40.86  37.61  68.11  73.15  28.23  26.08  75.08  66.97  77.26  70.81\n  57.89  68.1   20.75  71.05  72.14  27.94  59.01  48.45  28.43  36.16\n  75.16  77.94  51.7   62.9   78.24  35.98  73.94  29.26  40.16  20.52\n  55.75  21.53  21.5   30.62  73.55  48.21 118.16  38.57  70.7   26.61\n  38.42  23.34  40.05  54.54  72.54  44.59  70.49  75.8   76.02  94.36\n  72.57  79.76  87.44  38.01  80.71  75.83  47.35  42.24  37.13  53.9\n  79.44  73.05  79.06  70.06  50.86  35.67 120.47 114.05  40.98  36.38\n  69.44  34.81  68.34  65.26  71.49  84.02  67.32  40.26  24.81  57.35\n  32.26  51.78  23.73  66.86  71.67  74.11  72.54  38.85  79.08  24.03\n  80.79  24.47  32.27  21.28  34.6   63.94  71.16  66.3   79.57  71.32\n  34.49  70.67  72.27  51.64  85.61  39.98  95.01  62.2   64.93  80.26\n  68.57  77.32 123.99  38.46  41.32  62.92  25.61 122.03  73.14  50.87\n  73.56  42.87  34.01  92.93  38.03  68.51  27.72  74.29  77.06  31.14\n  33.62  23.16  23.97  72.1   22.04  67.54  61.15  52.52  69.97  70.27\n  74.8   43.61  36.85  71.65  75.47  39.04  78.82  75.52  40.77  24.92\n  31.47  34.11  76.36  49.53  39.14  45.64  41.12  69.87  72.97  72.75\n  83.98  27.53  47.06  66.07  51.08  77.88 130.93  68.38  25.42  72.86\n  62.35  67.14  49.19  36.63  74.99  40.33  39.31  71.    29.84  71.39\n  30.27  34.05  42.29  44.87  73.55  35.35  66.06  45.31  51.24  29.67\n  21.35  65.88  67.98  73.58  85.62  76.61  62.35  82.43  51.47  79.05\n  69.79  47.65  24.04  40.48  43.94  68.57  58.97  61.36  77.4   61.81\n  85.47  43.81  88.18  34.02  35.88  35.25  57.38  24.6   68.7   88.52\n  36.82  31.82  72.53  36.74  35.4   73.4   68.97  75.6   34.9   35.39\n  34.85  68.88  29.36  70.33  68.91  26.56  69.64  67.75  65.69  78.\n  89.41  44.66  68.76  59.2   39.94  68.35  73.75  30.22  75.24  71.56\n  64.94  69.51  83.74  64.34  34.39  77.2   39.04  23.97  52.72 100.\n  62.59  52.86  74.29  66.46  68.17  34.86  72.01  76.83  74.78  45.69\n  38.68  88.86  75.27  72.78  40.03  72.64  97.61  36.19  52.18  75.27\n  32.54  34.81  73.15  67.57  65.48  49.88  34.21  54.8   53.43  28.37\n  66.67  40.1   37.44  29.33  94.49  52.58  61.4   30.8   64.91  48.19\n  68.28  76.24 128.13  35.12  73.98  63.61  62.59  77.25  37.26  70.53\n  46.46  30.46  22.81  64.32  62.07  24.39  70.62  85.98  77.17  57.97\n  65.74 102.33  49.03  32.1   76.66  64.95  84.6   70.06  79.19  83.21\n  64.65  40.08  80.64  69.37  72.79  28.42  27.17  27.33  36.67  74.12\n  68.36  39.25  78.92  30.3   45.32  73.71  70.42  91.23  31.6   22.9\n  82.46  46.47  42.22 149.02  44.34  69.73  40.72  33.23  46.99  35.48\n  25.99  75.94  43.26  50.36  58.92  39.25  62.24  65.88  69.89  76.17\n  23.45  71.34  58.74  45.94  68.2   73.12  70.68  73.62  80.82  53.28\n  69.64  76.76  41.3   76.58  76.86  38.42  74.39  62.29  79.19  53.85\n  65.8   37.41  82.99  42.92  51.73  64.39  32.79  79.79  24.95  73.85\n  88.34  70.6   35.7   29.94  72.67  66.95  25.34  25.32  64.99  62.46\n  39.01  72.81  70.87  75.94  36.84  38.04  74.91  77.44  26.01  71.08\n  76.65  24.5   33.4   55.92  42.13  34.65  77.8   63.81 104.61  49.16\n  70.14  23.7 ].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [93]\u001b[0m, in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m x_train_std \u001b[38;5;241m=\u001b[39m sc_x\u001b[38;5;241m.\u001b[39mfit_transform(x_train_ar)\n\u001b[1;32m      5\u001b[0m x_test_std \u001b[38;5;241m=\u001b[39m sc_x\u001b[38;5;241m.\u001b[39mtransform(x_test_ar)\n\u001b[0;32m----> 6\u001b[0m y_train_std \u001b[38;5;241m=\u001b[39m \u001b[43msc_y\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit_transform\u001b[49m\u001b[43m(\u001b[49m\u001b[43my_train_ar\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/base.py:867\u001b[0m, in \u001b[0;36mTransformerMixin.fit_transform\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    863\u001b[0m \u001b[38;5;66;03m# non-optimized default implementation; override when a better\u001b[39;00m\n\u001b[1;32m    864\u001b[0m \u001b[38;5;66;03m# method is possible for a given clustering algorithm\u001b[39;00m\n\u001b[1;32m    865\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m y \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    866\u001b[0m     \u001b[38;5;66;03m# fit method of arity 1 (unsupervised transformation)\u001b[39;00m\n\u001b[0;32m--> 867\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfit_params\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39mtransform(X)\n\u001b[1;32m    868\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    869\u001b[0m     \u001b[38;5;66;03m# fit method of arity 2 (supervised transformation)\u001b[39;00m\n\u001b[1;32m    870\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfit(X, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params)\u001b[38;5;241m.\u001b[39mtransform(X)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/preprocessing/_data.py:809\u001b[0m, in \u001b[0;36mStandardScaler.fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    807\u001b[0m \u001b[38;5;66;03m# Reset internal state before fitting\u001b[39;00m\n\u001b[1;32m    808\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reset()\n\u001b[0;32m--> 809\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpartial_fit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/preprocessing/_data.py:844\u001b[0m, in \u001b[0;36mStandardScaler.partial_fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    812\u001b[0m \u001b[38;5;124;03m\"\"\"Online computation of mean and std on X for later scaling.\u001b[39;00m\n\u001b[1;32m    813\u001b[0m \n\u001b[1;32m    814\u001b[0m \u001b[38;5;124;03mAll of X is processed as a single batch. This is intended for cases\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    841\u001b[0m \u001b[38;5;124;03m    Fitted scaler.\u001b[39;00m\n\u001b[1;32m    842\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    843\u001b[0m first_call \u001b[38;5;241m=\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mn_samples_seen_\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m--> 844\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_data\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    845\u001b[0m \u001b[43m    \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    846\u001b[0m \u001b[43m    \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcsr\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcsc\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    847\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mFLOAT_DTYPES\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    848\u001b[0m \u001b[43m    \u001b[49m\u001b[43mforce_all_finite\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mallow-nan\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    849\u001b[0m \u001b[43m    \u001b[49m\u001b[43mreset\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfirst_call\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    850\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    851\u001b[0m n_features \u001b[38;5;241m=\u001b[39m X\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m    853\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m sample_weight \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/base.py:577\u001b[0m, in \u001b[0;36mBaseEstimator._validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    575\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mValidation should be done on X, y or both.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    576\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m no_val_y:\n\u001b[0;32m--> 577\u001b[0m     X \u001b[38;5;241m=\u001b[39m \u001b[43mcheck_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minput_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mX\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mcheck_params\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    578\u001b[0m     out \u001b[38;5;241m=\u001b[39m X\n\u001b[1;32m    579\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_y:\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/utils/validation.py:879\u001b[0m, in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m    877\u001b[0m     \u001b[38;5;66;03m# If input is 1D raise error\u001b[39;00m\n\u001b[1;32m    878\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m array\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m--> 879\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    880\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mExpected 2D array, got 1D array instead:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124marray=\u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    881\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mReshape your data either using array.reshape(-1, 1) if \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    882\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124myour data has a single feature or array.reshape(1, -1) \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    883\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mif it contains a single sample.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(array)\n\u001b[1;32m    884\u001b[0m         )\n\u001b[1;32m    886\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m dtype_numeric \u001b[38;5;129;01mand\u001b[39;00m array\u001b[38;5;241m.\u001b[39mdtype\u001b[38;5;241m.\u001b[39mkind \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUSV\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m    887\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    888\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnumeric\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m is not compatible with arrays of bytes/strings.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    889\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mConvert your data to numeric values explicitly instead.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    890\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: Expected 2D array, got 1D array instead:\narray=[ 49.44  58.97  75.41  72.38  65.18  31.81  37.53  70.28  77.52  63.73\n  75.68  49.21  75.31  27.57  20.79  67.71  46.94  38.74  88.77  64.54\n  49.37  42.7   67.04  73.56  57.26  18.55  52.97  64.53  58.4   40.83\n  40.86  37.61  68.11  73.15  28.23  26.08  75.08  66.97  77.26  70.81\n  57.89  68.1   20.75  71.05  72.14  27.94  59.01  48.45  28.43  36.16\n  75.16  77.94  51.7   62.9   78.24  35.98  73.94  29.26  40.16  20.52\n  55.75  21.53  21.5   30.62  73.55  48.21 118.16  38.57  70.7   26.61\n  38.42  23.34  40.05  54.54  72.54  44.59  70.49  75.8   76.02  94.36\n  72.57  79.76  87.44  38.01  80.71  75.83  47.35  42.24  37.13  53.9\n  79.44  73.05  79.06  70.06  50.86  35.67 120.47 114.05  40.98  36.38\n  69.44  34.81  68.34  65.26  71.49  84.02  67.32  40.26  24.81  57.35\n  32.26  51.78  23.73  66.86  71.67  74.11  72.54  38.85  79.08  24.03\n  80.79  24.47  32.27  21.28  34.6   63.94  71.16  66.3   79.57  71.32\n  34.49  70.67  72.27  51.64  85.61  39.98  95.01  62.2   64.93  80.26\n  68.57  77.32 123.99  38.46  41.32  62.92  25.61 122.03  73.14  50.87\n  73.56  42.87  34.01  92.93  38.03  68.51  27.72  74.29  77.06  31.14\n  33.62  23.16  23.97  72.1   22.04  67.54  61.15  52.52  69.97  70.27\n  74.8   43.61  36.85  71.65  75.47  39.04  78.82  75.52  40.77  24.92\n  31.47  34.11  76.36  49.53  39.14  45.64  41.12  69.87  72.97  72.75\n  83.98  27.53  47.06  66.07  51.08  77.88 130.93  68.38  25.42  72.86\n  62.35  67.14  49.19  36.63  74.99  40.33  39.31  71.    29.84  71.39\n  30.27  34.05  42.29  44.87  73.55  35.35  66.06  45.31  51.24  29.67\n  21.35  65.88  67.98  73.58  85.62  76.61  62.35  82.43  51.47  79.05\n  69.79  47.65  24.04  40.48  43.94  68.57  58.97  61.36  77.4   61.81\n  85.47  43.81  88.18  34.02  35.88  35.25  57.38  24.6   68.7   88.52\n  36.82  31.82  72.53  36.74  35.4   73.4   68.97  75.6   34.9   35.39\n  34.85  68.88  29.36  70.33  68.91  26.56  69.64  67.75  65.69  78.\n  89.41  44.66  68.76  59.2   39.94  68.35  73.75  30.22  75.24  71.56\n  64.94  69.51  83.74  64.34  34.39  77.2   39.04  23.97  52.72 100.\n  62.59  52.86  74.29  66.46  68.17  34.86  72.01  76.83  74.78  45.69\n  38.68  88.86  75.27  72.78  40.03  72.64  97.61  36.19  52.18  75.27\n  32.54  34.81  73.15  67.57  65.48  49.88  34.21  54.8   53.43  28.37\n  66.67  40.1   37.44  29.33  94.49  52.58  61.4   30.8   64.91  48.19\n  68.28  76.24 128.13  35.12  73.98  63.61  62.59  77.25  37.26  70.53\n  46.46  30.46  22.81  64.32  62.07  24.39  70.62  85.98  77.17  57.97\n  65.74 102.33  49.03  32.1   76.66  64.95  84.6   70.06  79.19  83.21\n  64.65  40.08  80.64  69.37  72.79  28.42  27.17  27.33  36.67  74.12\n  68.36  39.25  78.92  30.3   45.32  73.71  70.42  91.23  31.6   22.9\n  82.46  46.47  42.22 149.02  44.34  69.73  40.72  33.23  46.99  35.48\n  25.99  75.94  43.26  50.36  58.92  39.25  62.24  65.88  69.89  76.17\n  23.45  71.34  58.74  45.94  68.2   73.12  70.68  73.62  80.82  53.28\n  69.64  76.76  41.3   76.58  76.86  38.42  74.39  62.29  79.19  53.85\n  65.8   37.41  82.99  42.92  51.73  64.39  32.79  79.79  24.95  73.85\n  88.34  70.6   35.7   29.94  72.67  66.95  25.34  25.32  64.99  62.46\n  39.01  72.81  70.87  75.94  36.84  38.04  74.91  77.44  26.01  71.08\n  76.65  24.5   33.4   55.92  42.13  34.65  77.8   63.81 104.61  49.16\n  70.14  23.7 ].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."]}},"pos":106,"start":1655479433146,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479433670,"exec_count":94,"id":"2383de","input":"lasso_model = Lasso(random_state=0)\nlasso_model.fit(x_train_ar, y_train_ar)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Lasso(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso(random_state=0)</pre></div></div></div></div></div>","text/plain":"Lasso(random_state=0)"},"exec_count":94}},"pos":109,"start":1655479433665,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479433682,"exec_count":95,"id":"021598","input":"lasso_model.score(x_train_ar, y_train_ar)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.9990163481042897"},"exec_count":95}},"pos":110,"start":1655479433675,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479433697,"exec_count":96,"id":"11c927","input":"lasso_model.score(x_test_ar, y_test_ar)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.9984929774403593"},"exec_count":96}},"pos":111,"start":1655479433688,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479433711,"exec_count":97,"id":"b3000f","input":"mean_squared_error(y_test_ar, lasso_model.predict(x_test_ar))","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.7180257402316035"},"exec_count":97}},"pos":112,"start":1655479433705,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479433754,"exec_count":98,"id":"5be5d9","input":"alpha = np.linspace(0.01,0.4,10)\nr2_train =[]\nr2_test =[]\nnorm = []\nalpha = np.linspace(0.01,0.4,10)\nfor i in range(10):\n    lasso = Lasso(alpha = alpha[i])\n    lasso.fit(x_train_std,y_train_std)\n    y_train_std = lasso.predict(x_train_std)\n    y_test_std = lasso.predict(x_test_std)\n    r2_train = np.append(r2_train,\n              r2_score(y_train,sc_y.inverse_transform(y_train_std)))\n    r2_test = np.append(r2_test,\n              r2_score(y_test,sc_y.inverse_transform(y_test_std)))\n    norm = np.append(norm,np.linalg.norm(lasso.coef_))","kernel":"ds_env","no_halt":true,"output":{"0":{"ename":"NameError","evalue":"name 'y_train_std' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [98]\u001b[0m, in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m10\u001b[39m):\n\u001b[1;32m      7\u001b[0m     lasso \u001b[38;5;241m=\u001b[39m Lasso(alpha \u001b[38;5;241m=\u001b[39m alpha[i])\n\u001b[0;32m----> 8\u001b[0m     lasso\u001b[38;5;241m.\u001b[39mfit(x_train_std,\u001b[43my_train_std\u001b[49m)\n\u001b[1;32m      9\u001b[0m     y_train_std \u001b[38;5;241m=\u001b[39m lasso\u001b[38;5;241m.\u001b[39mpredict(x_train_std)\n\u001b[1;32m     10\u001b[0m     y_test_std \u001b[38;5;241m=\u001b[39m lasso\u001b[38;5;241m.\u001b[39mpredict(x_test_std)\n","\u001b[0;31mNameError\u001b[0m: name 'y_train_std' is not defined"]}},"pos":113,"start":1655479433744,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479436378,"exec_count":99,"id":"c7596b","input":"#defining x and y\nx = final_df['Groceries Index'] .to_numpy\ny = final_df[''].to_numpy","kernel":"ds_env","no_halt":true,"output":{"0":{"ename":"KeyError","evalue":"''","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/indexes/base.py:3621\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3620\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3621\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3622\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/_libs/index.pyx:136\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/_libs/index.pyx:163\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:5198\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:5206\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: ''","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Input \u001b[0;32mIn [99]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m#defining x and y\u001b[39;00m\n\u001b[1;32m      2\u001b[0m x \u001b[38;5;241m=\u001b[39m final_df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mGroceries Index\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m.\u001b[39mto_numpy\n\u001b[0;32m----> 3\u001b[0m y \u001b[38;5;241m=\u001b[39m \u001b[43mfinal_df\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241m.\u001b[39mto_numpy\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/frame.py:3505\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3503\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   3504\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[0;32m-> 3505\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3506\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[1;32m   3507\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/indexes/base.py:3623\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3621\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[1;32m   3622\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[0;32m-> 3623\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3624\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3625\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3626\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3627\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3628\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n","\u001b[0;31mKeyError\u001b[0m: ''"]}},"pos":118,"start":1655479433757,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479436390,"exec_count":100,"id":"265f62","input":"x = final_df.drop('Cost of Living Index', axis=1)","kernel":"ds_env","no_halt":true,"pos":120,"start":1655479436387,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479436400,"exec_count":101,"id":"05e318","input":"final_df.columns","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"Index(['Cost of Living Index', 'Rent Index', 'Cost of Living Plus Rent Index',\n       'Groceries Index', 'Restaurant Price Index',\n       'Local Purchasing Power Index', 'Meal, Inexpensive Restaurant',\n       'Meal for 2 People, Mid-range Restaurant, Three-course',\n       'McMeal at McDonalds (or Equivalent Combo Meal)',\n       'One-way Ticket (Local Transport)',\n       ...\n       'Izmir, Turkey', 'Delhi, India', 'Bangalore, India', 'Bogota, Colombia',\n       'Pune, India', 'Ankara, Turkey', 'Hyderabad, India', 'Chennai, India',\n       'Ahmedabad, India', 'Kolkata, India'],\n      dtype='object', length=183)"},"exec_count":101}},"pos":121,"scrolled":true,"start":1655479436396,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479436408,"exec_count":102,"id":"e4f12d","input":"y = final_df['Cost of Living Index']","kernel":"ds_env","no_halt":true,"pos":122,"start":1655479436405,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479436421,"exec_count":103,"id":"b9e269","input":"# importing\nfrom sklearn.model_selection import train_test_split","kernel":"ds_env","no_halt":true,"pos":123,"start":1655479436417,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479436445,"exec_count":104,"id":"3f836f","input":"x_train_Nne, x_test_Nne, y_train_Nne, y_test_Nne = train_test_split( x, y, test_size=0.2 )\n","kernel":"ds_env","no_halt":true,"pos":124,"scrolled":true,"start":1655479436429,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479438015,"exec_count":105,"id":"b256ac","input":"plt.subplot(1,2,1)\nplt.scatter(x_train_Nne,y_train_Nne, c='orange')  \n#plt.xlabel('x', fontsize=10)\n#plt.ylabel('y', fontsize= 10)\n#plt.title('cost of living train plot')\n#plt.grid('on')\n\n#plt.show()\n\n","kernel":"ds_env","no_halt":true,"output":{"0":{"ename":"ValueError","evalue":"x and y must be the same size","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [105]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m plt\u001b[38;5;241m.\u001b[39msubplot(\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m----> 2\u001b[0m \u001b[43mplt\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mscatter\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx_train_Nne\u001b[49m\u001b[43m,\u001b[49m\u001b[43my_train_Nne\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mc\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43morange\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/matplotlib/pyplot.py:2807\u001b[0m, in \u001b[0;36mscatter\u001b[0;34m(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, data, **kwargs)\u001b[0m\n\u001b[1;32m   2802\u001b[0m \u001b[38;5;129m@_copy_docstring_and_deprecators\u001b[39m(Axes\u001b[38;5;241m.\u001b[39mscatter)\n\u001b[1;32m   2803\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mscatter\u001b[39m(\n\u001b[1;32m   2804\u001b[0m         x, y, s\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, c\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, marker\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, cmap\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, norm\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m   2805\u001b[0m         vmin\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, vmax\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, linewidths\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m,\n\u001b[1;32m   2806\u001b[0m         edgecolors\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, plotnonfinite\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, data\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m-> 2807\u001b[0m     __ret \u001b[38;5;241m=\u001b[39m \u001b[43mgca\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mscatter\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   2808\u001b[0m \u001b[43m        \u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43ms\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43ms\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mc\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mc\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmarker\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmarker\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcmap\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcmap\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnorm\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnorm\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2809\u001b[0m \u001b[43m        \u001b[49m\u001b[43mvmin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvmin\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvmax\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvmax\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43malpha\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43malpha\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlinewidths\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlinewidths\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2810\u001b[0m \u001b[43m        \u001b[49m\u001b[43medgecolors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43medgecolors\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mplotnonfinite\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mplotnonfinite\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2811\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m{\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mdata\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m}\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mis\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mnot\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43;01melse\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43m{\u001b[49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2812\u001b[0m     sci(__ret)\n\u001b[1;32m   2813\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m __ret\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/matplotlib/__init__.py:1412\u001b[0m, in \u001b[0;36m_preprocess_data.<locals>.inner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1409\u001b[0m \u001b[38;5;129m@functools\u001b[39m\u001b[38;5;241m.\u001b[39mwraps(func)\n\u001b[1;32m   1410\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21minner\u001b[39m(ax, \u001b[38;5;241m*\u001b[39margs, data\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m   1411\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m data \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 1412\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[43max\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;28;43mmap\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43msanitize_sequence\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1414\u001b[0m     bound \u001b[38;5;241m=\u001b[39m new_sig\u001b[38;5;241m.\u001b[39mbind(ax, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1415\u001b[0m     auto_label \u001b[38;5;241m=\u001b[39m (bound\u001b[38;5;241m.\u001b[39marguments\u001b[38;5;241m.\u001b[39mget(label_namer)\n\u001b[1;32m   1416\u001b[0m                   \u001b[38;5;129;01mor\u001b[39;00m bound\u001b[38;5;241m.\u001b[39mkwargs\u001b[38;5;241m.\u001b[39mget(label_namer))\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/matplotlib/axes/_axes.py:4369\u001b[0m, in \u001b[0;36mAxes.scatter\u001b[0;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, **kwargs)\u001b[0m\n\u001b[1;32m   4367\u001b[0m y \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mma\u001b[38;5;241m.\u001b[39mravel(y)\n\u001b[1;32m   4368\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m x\u001b[38;5;241m.\u001b[39msize \u001b[38;5;241m!=\u001b[39m y\u001b[38;5;241m.\u001b[39msize:\n\u001b[0;32m-> 4369\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mx and y must be the same size\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   4371\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m s \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   4372\u001b[0m     s \u001b[38;5;241m=\u001b[39m (\u001b[38;5;241m20\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m rcParams[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m_internal.classic_mode\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;28;01melse\u001b[39;00m\n\u001b[1;32m   4373\u001b[0m          rcParams[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlines.markersize\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m \u001b[38;5;241m2.0\u001b[39m)\n","\u001b[0;31mValueError\u001b[0m: x and y must be the same size"]},"1":{"data":{"image/png":"adfaded3285b85d66008811acd9a914588355151","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":125,"scrolled":true,"start":1655479436450,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479438043,"exec_count":106,"id":"b59489","input":"from sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train_Nne, y_train_Nne)\nprint(linr.intercept_, linr.coef_[0])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.06423199445352168 -0.8663227759467393\n"}},"pos":126,"scrolled":true,"start":1655479438027,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479438055,"exec_count":107,"id":"645380","input":"y_hat = linr.predict(x_test_Nne)","kernel":"ds_env","no_halt":true,"pos":127,"scrolled":true,"start":1655479438048,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479439154,"exec_count":108,"id":"7db45a","input":"plt.figure(figsize=(10,5))\nplt.plot(x_test_Nne, y_hat, '--')\n\nplt.scatter(x_test_Nne,y_test_Nne, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"ename":"InvalidIndexError","evalue":"(slice(None, None, None), None)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/indexes/base.py:3621\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3620\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3621\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3622\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/_libs/index.pyx:136\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/_libs/index.pyx:142\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: '(slice(None, None, None), None)' is an invalid key","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mInvalidIndexError\u001b[0m                         Traceback (most recent call last)","Input \u001b[0;32mIn [108]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m10\u001b[39m,\u001b[38;5;241m5\u001b[39m))\n\u001b[0;32m----> 2\u001b[0m \u001b[43mplt\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mplot\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx_test_Nne\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_hat\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m--\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      4\u001b[0m plt\u001b[38;5;241m.\u001b[39mscatter(x_test_Nne,y_test_Nne, c\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124morange\u001b[39m\u001b[38;5;124m'\u001b[39m)  \n\u001b[1;32m      5\u001b[0m plt\u001b[38;5;241m.\u001b[39mxlabel(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mx\u001b[39m\u001b[38;5;124m'\u001b[39m, fontsize \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m20\u001b[39m) \n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/matplotlib/pyplot.py:2757\u001b[0m, in \u001b[0;36mplot\u001b[0;34m(scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2755\u001b[0m \u001b[38;5;129m@_copy_docstring_and_deprecators\u001b[39m(Axes\u001b[38;5;241m.\u001b[39mplot)\n\u001b[1;32m   2756\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mplot\u001b[39m(\u001b[38;5;241m*\u001b[39margs, scalex\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, scaley\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, data\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m-> 2757\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mgca\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mplot\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   2758\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mscalex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mscalex\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mscaley\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mscaley\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2759\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m{\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mdata\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m}\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mis\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mnot\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43;01melse\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43m{\u001b[49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/matplotlib/axes/_axes.py:1632\u001b[0m, in \u001b[0;36mAxes.plot\u001b[0;34m(self, scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1390\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   1391\u001b[0m \u001b[38;5;124;03mPlot y versus x as lines and/or markers.\u001b[39;00m\n\u001b[1;32m   1392\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1629\u001b[0m \u001b[38;5;124;03m(``'green'``) or hex strings (``'#008000'``).\u001b[39;00m\n\u001b[1;32m   1630\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   1631\u001b[0m kwargs \u001b[38;5;241m=\u001b[39m cbook\u001b[38;5;241m.\u001b[39mnormalize_kwargs(kwargs, mlines\u001b[38;5;241m.\u001b[39mLine2D)\n\u001b[0;32m-> 1632\u001b[0m lines \u001b[38;5;241m=\u001b[39m [\u001b[38;5;241m*\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_lines(\u001b[38;5;241m*\u001b[39margs, data\u001b[38;5;241m=\u001b[39mdata, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)]\n\u001b[1;32m   1633\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m line \u001b[38;5;129;01min\u001b[39;00m lines:\n\u001b[1;32m   1634\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39madd_line(line)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/matplotlib/axes/_base.py:312\u001b[0m, in \u001b[0;36m_process_plot_var_args.__call__\u001b[0;34m(self, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m    310\u001b[0m     this \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m args[\u001b[38;5;241m0\u001b[39m],\n\u001b[1;32m    311\u001b[0m     args \u001b[38;5;241m=\u001b[39m args[\u001b[38;5;241m1\u001b[39m:]\n\u001b[0;32m--> 312\u001b[0m \u001b[38;5;28;01myield from\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_plot_args\u001b[49m\u001b[43m(\u001b[49m\u001b[43mthis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/matplotlib/axes/_base.py:487\u001b[0m, in \u001b[0;36m_process_plot_var_args._plot_args\u001b[0;34m(self, tup, kwargs, return_kwargs)\u001b[0m\n\u001b[1;32m    484\u001b[0m         kw[prop_name] \u001b[38;5;241m=\u001b[39m val\n\u001b[1;32m    486\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(xy) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m2\u001b[39m:\n\u001b[0;32m--> 487\u001b[0m     x \u001b[38;5;241m=\u001b[39m \u001b[43m_check_1d\u001b[49m\u001b[43m(\u001b[49m\u001b[43mxy\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    488\u001b[0m     y \u001b[38;5;241m=\u001b[39m _check_1d(xy[\u001b[38;5;241m1\u001b[39m])\n\u001b[1;32m    489\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/matplotlib/cbook/__init__.py:1327\u001b[0m, in \u001b[0;36m_check_1d\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m   1321\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m warnings\u001b[38;5;241m.\u001b[39mcatch_warnings(record\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m) \u001b[38;5;28;01mas\u001b[39;00m w:\n\u001b[1;32m   1322\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mfilterwarnings(\n\u001b[1;32m   1323\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124malways\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   1324\u001b[0m         category\u001b[38;5;241m=\u001b[39m\u001b[38;5;167;01mWarning\u001b[39;00m,\n\u001b[1;32m   1325\u001b[0m         message\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mSupport for multi-dimensional indexing\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m-> 1327\u001b[0m     ndim \u001b[38;5;241m=\u001b[39m \u001b[43mx\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m]\u001b[49m\u001b[38;5;241m.\u001b[39mndim\n\u001b[1;32m   1328\u001b[0m     \u001b[38;5;66;03m# we have definitely hit a pandas index or series object\u001b[39;00m\n\u001b[1;32m   1329\u001b[0m     \u001b[38;5;66;03m# cast to a numpy array.\u001b[39;00m\n\u001b[1;32m   1330\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(w) \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/frame.py:3505\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3503\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   3504\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[0;32m-> 3505\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3506\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[1;32m   3507\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/indexes/base.py:3628\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3623\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3624\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3625\u001b[0m         \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3626\u001b[0m         \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3627\u001b[0m         \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[0;32m-> 3628\u001b[0m         \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_check_indexing_error\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3629\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m\n\u001b[1;32m   3631\u001b[0m \u001b[38;5;66;03m# GH#42269\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/indexes/base.py:5637\u001b[0m, in \u001b[0;36mIndex._check_indexing_error\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   5633\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_check_indexing_error\u001b[39m(\u001b[38;5;28mself\u001b[39m, key):\n\u001b[1;32m   5634\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m is_scalar(key):\n\u001b[1;32m   5635\u001b[0m         \u001b[38;5;66;03m# if key is not a scalar, directly raise an error (the code below\u001b[39;00m\n\u001b[1;32m   5636\u001b[0m         \u001b[38;5;66;03m# would convert to numpy arrays and raise later any way) - GH29926\u001b[39;00m\n\u001b[0;32m-> 5637\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n","\u001b[0;31mInvalidIndexError\u001b[0m: (slice(None, None, None), None)"]},"1":{"data":{"image/png":"992618c4e99f9dcba2a7cbf02d264963e9feadac","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":128,"scrolled":true,"start":1655479438067,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479439172,"exec_count":109,"id":"f7c464","input":"linr.score(x_train_Nne, y_train_Nne)#also put y_train_Nne","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"1.0"},"exec_count":109}},"pos":129,"start":1655479439167,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479439189,"exec_count":110,"id":"583134","input":"#do the same but with x_test_Nne, y_test_Nne\nlinr.score(x_test_Nne, y_test_Nne)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.9999982116922765"},"exec_count":110}},"pos":130,"start":1655479439185,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479439209,"exec_count":111,"id":"b1b3b7","input":"#now do mean_squared_error(y_test_sm, random_forest.predict(x_test_sm)) but with linr instead of random_forest and your variables\nmean_squared_error(y_test_Nne, linr.predict(x_test_Nne))","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.0007372376547200702"},"exec_count":111}},"pos":131,"start":1655479439193,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479439240,"exec_count":112,"id":"e8ee67","input":"linr = linr(kernel='rbf', C=5)\nlinr.fit(x_train_Nne, y_train_Nne)\nmodel_performance.append({\n        'model': 'Linear_Regression',\n        'tra': linr.score(x_train_Nne, y_train_Nne),\n        'mse': mean_squared_error(y_test_Nne, linr.predict(x_test_Nne))\n    })","kernel":"ds_env","no_halt":true,"output":{"0":{"ename":"TypeError","evalue":"'LinearRegression' object is not callable","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [112]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m linr \u001b[38;5;241m=\u001b[39m \u001b[43mlinr\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkernel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mrbf\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mC\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m5\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      2\u001b[0m linr\u001b[38;5;241m.\u001b[39mfit(x_train_Nne, y_train_Nne)\n\u001b[1;32m      3\u001b[0m model_performance\u001b[38;5;241m.\u001b[39mappend({\n\u001b[1;32m      4\u001b[0m         \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmodel\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLinear_Regression\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[1;32m      5\u001b[0m         \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtra\u001b[39m\u001b[38;5;124m'\u001b[39m: linr\u001b[38;5;241m.\u001b[39mscore(x_train_Nne, y_train_Nne),\n\u001b[1;32m      6\u001b[0m         \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmse\u001b[39m\u001b[38;5;124m'\u001b[39m: mean_squared_error(y_test_Nne, linr\u001b[38;5;241m.\u001b[39mpredict(x_test_Nne))\n\u001b[1;32m      7\u001b[0m     })\n","\u001b[0;31mTypeError\u001b[0m: 'LinearRegression' object is not callable"]}},"pos":134,"start":1655479439225,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479439254,"exec_count":113,"id":"be9da0","input":"evaluation_df = pd.DataFrame(columns=['model', 'score', 'mse' ])\nevaluation_df","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model</th>\n      <th>score</th>\n      <th>mse</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>","text/plain":"Empty DataFrame\nColumns: [model, score, mse]\nIndex: []"},"exec_count":113}},"pos":135,"start":1655479439244,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479439264,"exec_count":114,"id":"876c2c","input":"import pandas as pd","kernel":"ds_env","no_halt":true,"pos":137,"start":1655479439261,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479439282,"exec_count":115,"id":"cc09cf","input":"from sklearn.model_selection import cross_val_score","kernel":"ds_env","no_halt":true,"pos":139,"start":1655479439270,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479439306,"exec_count":116,"id":"187cfa","input":"cross_val_score(linr.SCV())","kernel":"ds_env","no_halt":true,"output":{"0":{"ename":"AttributeError","evalue":"'LinearRegression' object has no attribute 'SCV'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","Input \u001b[0;32mIn [116]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m cross_val_score(\u001b[43mlinr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mSCV\u001b[49m())\n","\u001b[0;31mAttributeError\u001b[0m: 'LinearRegression' object has no attribute 'SCV'"]}},"pos":140,"start":1655479439299,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479439315,"exec_count":117,"id":"0c6965","input":"from sklearn.model_selection import train_test_split","kernel":"ds_env","no_halt":true,"pos":141,"start":1655479439311,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479439345,"exec_count":118,"id":"80eba8","input":"svr_model1 = SVR(kernel='rbf', gamma='scale', tol=0.001, C=5)\n## Kernel\n## gamma\n## tol\n## C\nsvr_model1.fit(x_train_Kath, y_train_Kath)\nprint(svr_model1.score(x_train_Kath, y_train_Kath))\nprint(svr_model1.score(x_test_Kath, y_test_Kath))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.7286812236074651\n0.37474601335448854\n"}},"pos":144,"start":1655479439320,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479439427,"exec_count":121,"id":"1d046c","input":"DecisionTreeRegressor()\n## criterion\n## splitter","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor()</pre></div></div></div></div></div>","text/plain":"DecisionTreeRegressor()"},"exec_count":121}},"pos":145,"start":1655479439426,"state":"done","type":"cell"}
{"cell_type":"code","end":1655479439449,"exec_count":122,"id":"00460b","input":"LinearRegression()\n## Normalization","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>","text/plain":"LinearRegression()"},"exec_count":122}},"pos":146,"start":1655479439432,"state":"done","type":"cell"}
{"cell_type":"code","end":1655487649136,"exec_count":133,"id":"0cbd0b","input":"#LassoRegression #Best\nLasso_model1 = Lasso(tol=0.000001, fit_intercept=False, precompute=False, max_iter=100000, warm_start=True, positive=False, copy_X=True, alpha=0.001 )\n## Tol\n##\nLasso_model1.fit(x_train_ar, y_train_ar)\nprint(Lasso_model1.score(x_train_ar, y_train_ar))\nprint(Lasso_model1.score(x_test_ar, y_test_ar))\nprint(mean_squared_error(y_test_ar, lasso_model.predict(x_test_ar)))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.999999902536181\n0.9999998915243217\n0.7180257402316035\n"}},"pos":147,"start":1655487649126,"state":"done","type":"cell"}
{"cell_type":"code","id":"03eb04","input":"","pos":70,"type":"cell"}
{"cell_type":"code","id":"0df456","input":"","pos":99,"type":"cell"}
{"cell_type":"code","id":"206364","input":"","pos":138,"type":"cell"}
{"cell_type":"code","id":"214830","input":"","pos":15,"type":"cell"}
{"cell_type":"code","id":"57dd76","input":"","pos":115,"type":"cell"}
{"cell_type":"code","id":"7cc7e8","input":"","pos":108,"type":"cell"}
{"cell_type":"code","id":"bcab41","input":"","pos":136,"type":"cell"}
{"cell_type":"code","id":"d0e6d8","input":"","pos":14,"type":"cell"}
{"cell_type":"code","id":"e4d39c","input":"","pos":132,"type":"cell"}
{"cell_type":"code","id":"ea81f6","input":"","pos":107,"type":"cell"}
{"cell_type":"code","id":"f2a86a","input":"","pos":116,"type":"cell"}
{"cell_type":"markdown","id":"1415c0","input":"#### Split-Fit-Predict-Evaluate","pos":78,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"725b44","input":"# Sophia (Random Forest)","pos":87,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"79c92d","input":"#### Split-Fit-Predict-Evaluate","pos":103,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7bafaf","input":"plt.figure(figsize=(8,6))\nplt.scatter(alpha,r2_train,label='r2_train')\nplt.plot(alpha,r2_train)\nplt.scatter(alpha,r2_test,label='r2_test')\nplt.plot(alpha,r2_test)\nplt.scatter(alpha,norm,label = 'norm')\nplt.plot(alpha,norm)\nplt.ylim(-0.1,1)\nplt.xlim(0,.43)\nplt.xlabel('alpha', size = 14)\nplt.ylabel('R2_score',size = 14)\nplt.legend()\nplt.show()","pos":114,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8a6204","input":"## GridSearchCV","pos":133,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8c63d3","input":"# Katherine (SVM/SVR)","pos":71,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"947794","input":"# David - Decision Tree","pos":52,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9762f0","input":"#### Split-Fit-Predict-Evaluate","pos":90,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9d63a8","input":"# Cost of Living\n\n","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"aa9fa2","input":"# GridSearchCV","pos":142,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"af24ec","input":"# Amir - Lasso Regression","pos":97,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b1bf55","input":"#### Split-Fit-Predict-Evaluate","pos":119,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c81f65","input":"# Nne Ezi - Linear Regression","pos":117,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"dddbf4","input":"#### Split-Fit-Predict-Evaluate","pos":57,"state":"done","type":"cell"}
{"end":1655479439379,"exec_count":119,"id":"73d838","input":"svr_model1 = SVR(kernel='rbf', gamma='auto', tol=0.001, C=5)\n## Kernel\n## gamma\n## tol\n## C\nsvr_model1.fit(x_train_Kath, y_train_Kath)\nprint(svr_model1.score(x_train_Kath, y_train_Kath))\nprint(svr_model1.score(x_test_Kath, y_test_Kath))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.7323682006380057\n0.38648454829595447\n"}},"pos":144.5,"start":1655479439363,"state":"done","type":"cell"}
{"end":1655479439409,"exec_count":120,"id":"bbb286","input":"svr_model1 = SVR(kernel='rbf', gamma='scale', tol=0.001, C=10)\n## Kernel\n## gamma\n## tol\n## C\nsvr_model1.fit(x_train_Kath, y_train_Kath)\nprint(svr_model1.score(x_train_Kath, y_train_Kath))\nprint(svr_model1.score(x_test_Kath, y_test_Kath))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.9124842753239754\n0.7947521043890898\n"}},"pos":144.75,"start":1655479439389,"state":"done","type":"cell"}
{"end":1655479452281,"exec_count":123,"id":"37e552","input":"svr_model1 = SVR(kernel='rbf', gamma='scale', tol=0.001, C=15)\n## Kernel\n## gamma\n## tol\n## C\nsvr_model1.fit(x_train_Kath, y_train_Kath)\nprint(svr_model1.score(x_train_Kath, y_train_Kath))\nprint(svr_model1.score(x_test_Kath, y_test_Kath))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.9448981120742814\n0.8470639921272892\n"}},"pos":144.875,"start":1655479452259,"state":"done","type":"cell"}
{"end":1655479464796,"exec_count":124,"id":"207bb3","input":"svr_model1 = SVR(kernel='rbf', gamma='scale', tol=0.001, C=20)\n## Kernel\n## gamma\n## tol\n## C\nsvr_model1.fit(x_train_Kath, y_train_Kath)\nprint(svr_model1.score(x_train_Kath, y_train_Kath))\nprint(svr_model1.score(x_test_Kath, y_test_Kath))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.9612464843326883\n0.8664303306498173\n"}},"pos":144.9375,"start":1655479464760,"state":"done","type":"cell"}
{"end":1655479478458,"exec_count":125,"id":"f845ed","input":"svr_model1 = SVR(kernel='rbf', gamma='scale', tol=0.001, C=30)\n## Kernel\n## gamma\n## tol\n## C\nsvr_model1.fit(x_train_Kath, y_train_Kath)\nprint(svr_model1.score(x_train_Kath, y_train_Kath))\nprint(svr_model1.score(x_test_Kath, y_test_Kath))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.9803925077600887\n0.8790932312047013\n"}},"pos":144.96875,"start":1655479478425,"state":"done","type":"cell"}
{"end":1655479497909,"exec_count":126,"id":"bec7c9","input":"svr_model1 = SVR(kernel='rbf', gamma='scale', tol=0.001, C=50)\n## Kernel\n## gamma\n## tol\n## C\nsvr_model1.fit(x_train_Kath, y_train_Kath)\nprint(svr_model1.score(x_train_Kath, y_train_Kath))\nprint(svr_model1.score(x_test_Kath, y_test_Kath))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.9986331658674138\n0.8959295390931301\n"}},"pos":144.984375,"start":1655479497866,"state":"done","type":"cell"}
{"end":1655479508864,"exec_count":127,"id":"3dca4f","input":"svr_model1 = SVR(kernel='rbf', gamma='scale', tol=0.001, C=100)\n## Kernel\n## gamma\n## tol\n## C\nsvr_model1.fit(x_train_Kath, y_train_Kath)\nprint(svr_model1.score(x_train_Kath, y_train_Kath))\nprint(svr_model1.score(x_test_Kath, y_test_Kath))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.9999796138832916\n0.8988210595324961\n"}},"pos":144.9921875,"start":1655479508818,"state":"done","type":"cell"}
{"end":1655479562815,"exec_count":130,"id":"54db08","input":"svr_model1 = SVR(kernel='rbf', gamma='scale', tol=0.01, C=100)\n## Kernel\n## gamma\n## tol\n## C\nsvr_model1.fit(x_train_Kath, y_train_Kath)\nprint(svr_model1.score(x_train_Kath, y_train_Kath))\nprint(svr_model1.score(x_test_Kath, y_test_Kath))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.9999794932152117\n0.8988138512843319\n"}},"pos":144.998046875,"start":1655479562745,"state":"done","type":"cell"}
{"end":1655479570591,"exec_count":131,"id":"594b78","input":"svr_model1 = SVR(kernel='rbf', gamma='scale', tol=1, C=100)\n## Kernel\n## gamma\n## tol\n## C\nsvr_model1.fit(x_train_Kath, y_train_Kath)\nprint(svr_model1.score(x_train_Kath, y_train_Kath))\nprint(svr_model1.score(x_test_Kath, y_test_Kath))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.9998684319279219\n0.8981647276167262\n"}},"pos":144.9990234375,"start":1655479570569,"state":"done","type":"cell"}
{"end":1655479585295,"exec_count":132,"id":"c7a731","input":"svr_model1 = SVR(kernel='rbf', gamma='scale', tol=0.0001, C=100)\n## Kernel\n## gamma\n## tol\n## C\nsvr_model1.fit(x_train_Kath, y_train_Kath)\nprint(svr_model1.score(x_train_Kath, y_train_Kath))\nprint(svr_model1.score(x_test_Kath, y_test_Kath))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.9999795961927119\n0.8988201761116265\n"}},"pos":144.99951171875,"start":1655479585252,"state":"done","type":"cell"}
{"id":"817388","input":"","pos":144.9998779296875,"type":"cell"}
{"id":"97d496","input":"","pos":144.999755859375,"type":"cell"}
{"id":"f49060","input":"","pos":148,"type":"cell"}
{"id":0,"time":1655489465148,"type":"user"}
{"last_load":1655474214397,"type":"file"}